{

    "rows": [
        {
            "row_idx": 0,
            "row": {
                "entry_point": "has_close_elements",
                "name": "HumanEval/0",
                "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers meeting a certain condition (e.g. closer to or larger than each other than\n    given threshold).\n    >>> candidate([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> candidate([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers larger than each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef candidate(...) -> bool:\n \"\"\" Check given a list of number.\"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers meeting a certain condition (e.g. closer to or larger than each other than\n    given threshold).\n    >>> candidate([1.0, 2.0, 3.0], 0.5)\n    True\n    >>> candidate([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    False\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(numbers: List[float], x: float) -> bool:\n \"\"\" given a list of number.\"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
                "test_case": "[{'input': '[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3', 'output': 'True', 'relation': '=='}, {'input': '[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05', 'output': 'False', 'relation': '=='}, {'input': '[1.0, 2.0, 5.9, 4.0, 5.0], 0.95', 'output': 'True', 'relation': '=='}, {'input': '[1.0, 2.0, 5.9, 4.0, 5.0], 0.8', 'output': 'False', 'relation': '=='}, {'input': '[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1', 'output': 'True', 'relation': '=='}, {'input': '[1.1, 2.2, 3.1, 4.1, 5.1], 1.0', 'output': 'True', 'relation': '=='}, {'input': '[1.1, 2.2, 3.1, 4.1, 5.1], 0.5', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 1,
            "row": {
                "entry_point": "separate_paren_groups",
                "name": "HumanEval/1",
                "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace has a certain requirement to meet) and not nested within each other\n   Keep or ignore any spaces in the input string.\n    >>> candidate('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['(', '(', '(']\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace has a certain requirement to meet) and not nested within each other\n   Keep or ignore any spaces in the input string.\n    >>> candidate('( ) (( )) (( )( ))')\n    ['(', '(', '(']\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace has a certain requirement to meet) and not nested within each other\n \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
                "test_case": "[{'input': \"'(()()) ((())) () ((())()())'\", 'output': \"['(()())', '((()))', '()', '((())()())']\", 'relation': '=='}, {'input': \"'() (()) ((())) (((())))'\", 'output': \"['()', '(())', '((()))', '(((())))']\", 'relation': '=='}, {'input': \"'(()(())((())))'\", 'output': \"['(()(())((())))']\", 'relation': '=='}, {'input': \"'( ) (( )) (( )( ))'\", 'output': \"['()', '(())', '(()())']\", 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 2,
            "row": {
                "entry_point": "truncate_number",
                "name": "HumanEval/2",
                "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return a certain part of the number (e.g. integer or decimal or another).\n    >>> candidate(3.5)\n    0.5\n    \"\"\"\n",
                "prompt1c": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    3\n    \"\"\"\n",
                "prompt1p": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n        \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return a certain part of the number (e.g. integer or decimal or another)\n    >>> candidate(3.5)\n    3\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n        \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1.0\n",
                "test_case": "[{'input': '3.5', 'output': '0.5', 'relation': '=='}, {'input': '1.33', 'output': '1e-6', 'relation': 'abs(candidate(1.33) - 0.33) < 1e-6'}, {'input': '123.456', 'output': '1e-6', 'relation': 'abs(candidate(123.456) - 0.456) < 1e-6'}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 3,
            "row": {
                "entry_point": "below_zero",
                "name": "HumanEval/3",
                "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n   a given balance (e.g. positive or zero). Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    False\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    True\n    >>> below_zero([1, 2, -4, 5])\n    False\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero.   \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n   a given balance (e.g. positive or zero). Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    True\n    >>> below_zero([1, 2, -4, 5])\n    False\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n   a given balance (e.g. positive or zero). Your task is to detect if at any point the balance of account fallls below zero.   \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
                "test_case": "[{'input': '[]', 'output': 'False', 'relation': '=='}, {'input': '[1, 2, -3, 1, 2, -3]', 'output': 'False', 'relation': '=='}, {'input': '[1, 2, -4, 5, 6]', 'output': 'True', 'relation': '=='}, {'input': '[1, -1, 2, -2, 5, -5, 4, -4]', 'output': 'False', 'relation': '=='}, {'input': '[1, -1, 2, -2, 5, -5, 4, -5]', 'output': 'True', 'relation': '=='}, {'input': '[1, -2, 2, -2, 5, -5, 4, -4]', 'output': 'True', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 4,
            "row": {
                "entry_point": "mean_absolute_deviation",
                "name": "HumanEval/4",
                "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around a certain attribute (e.g. max or mean or other) of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (e.g. max or mean in this case):\n    MAD = average | x - (e.g. max or mean or other) |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation. \n\"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around a certain attribute (e.g. max or mean or other) of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (e.g. max or mean in this case):\n    MAD = average | x - (e.g. max or mean or other) |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    MAD = average | x - (e.g. max or mean or other) |\n\"\"\"\n",
                "prompt2cp": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation. \n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n",
                "prompt3acp": "from typing import List\n\n\ndef candidate(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation.   >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n",
                "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
                "test_case": "[{'input': '[1.0, 2.0, 3.0]', 'output': '1e-6', 'relation': 'abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6'}, {'input': '[1.0, 2.0, 3.0, 4.0]', 'output': '1e-6', 'relation': 'abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6'}, {'input': '[1.0, 2.0, 3.0, 4.0, 5.0]', 'output': '1e-6', 'relation': 'abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6'}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 5,
            "row": {
                "entry_point": "intersperse",
                "name": "HumanEval/5",
                "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(numbers: List[int], x: int) -> List[int]:\n    \"\"\" Insert a number 'x' for a certain number of times in the input list `numbers'\n    >>> candidate([], 4)\n    []\n    >>> candidate([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    [4]\n    >>> intersperse([1, 2, 3], 4)\n    [1, 2, 3, 4]\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef candidate(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter'\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(numbers: List[int], x: int) -> List[int]:\n    \"\"\" Insert a number 'x' for a certain number of times in the input list `numbers'\n    >>> candidate([], 4)\n    [4]\n    >>> candidate([1, 2, 3], 4)\n    [1, 2, 3, 4]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
                "test_case": "[{'input': '[], 7', 'output': '[]', 'relation': '=='}, {'input': '[5, 6, 3, 2], 8', 'output': '[5, 8, 6, 8, 3, 8, 2]', 'relation': '=='}, {'input': '[2, 2, 2], 2', 'output': '[2, 2, 2, 2, 2]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 6,
            "row": {
                "entry_point": "parse_nested_parens",
                "name": "HumanEval/6",
                "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by certain characters.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> candidate('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (() ()) has maximum two levels of nesting while ((( ))) has three.\n\n    >>> parse_nested_parens('(()())((()))()((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output an integer\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by certain characters.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (() ()) has maximum two levels of nesting while ((( ))) has three.\n\n    >>> candidate('(()())((()))()((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by certain characters.\n    For each of the group, output an integer\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
                "test_case": "[{'input': \"'(()()) ((())) () ((())()())'\", 'output': '[2, 3, 1, 3]', 'relation': '=='}, {'input': \"'() (()) ((())) (((())))'\", 'output': '[1, 2, 3, 4]', 'relation': '=='}, {'input': \"'(()(())((())))'\", 'output': '[4]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 7,
            "row": {
                "entry_point": "filter_by_substring",
                "name": "HumanEval/7",
                "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(strings: List[str], x: str) -> List[str]:\n    \"\"\" Process an input list of strings given string x\n    >>> candidate([], 'a')\n    []\n    >>> candidate(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    ['a']\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['cde']\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(strings: List[str], x: str) -> List[str]:\n    \"\"\" Process an input list of strings given string x\n    >>> candidate([], 'a')\n    ['a']\n    >>> candidate(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['cde']\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(strings: List[str], x: str) -> List[str]:\n    \"\"\" Process an input list of strings\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring in x]\n",
                "test_case": "[{'input': \"[], 'john'\", 'output': '[]', 'relation': '=='}, {'input': \"['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'\", 'output': \"['xxx', 'xxxAAA', 'xxx']\", 'relation': '=='}, {'input': \"['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx'\", 'output': \"['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\", 'relation': '=='}, {'input': \"['grunt', 'trumpet', 'prune', 'gruesome'], 'run'\", 'output': \"['grunt', 'prune']\", 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 8,
            "row": {
                "entry_point": "sum_product",
                "name": "HumanEval/8",
                "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
                "prompt1a": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of a certain given subset of the integers in a list.\n    Empty sum or product should be equal to either 0 or 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
                "prompt1c": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (1, 0)\n    >>> sum_product([1, 2, 3, 4])\n    (24, 10)\n    \"\"\"\n",
                "prompt1p": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    \"\"\"\n",
                "prompt2ac": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of a certain given subset of the integers in a list.\n    Empty sum or product should be equal to either 0 or 1.\n    >>> candidate([])\n    (1, 0)\n    >>> candidate([1, 2, 3, 4])\n    (24, 10)\n    \"\"\"\n",
                "prompt2ap": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of a certain given subset of the integers in a list.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
                "test_case": "[{'input': '[]', 'output': '(0, 1)', 'relation': '=='}, {'input': '[1, 1, 1]', 'output': '(3, 1)', 'relation': '=='}, {'input': '[100, 0]', 'output': '(100, 0)', 'relation': '=='}, {'input': '[3, 5, 7]', 'output': '(15, 105)', 'relation': '=='}, {'input': '[10]', 'output': '(10, 10)', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 9,
            "row": {
                "entry_point": "rolling_max",
                "name": "HumanEval/9",
                "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
                "prompt1a": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling certain type of element (minimal or maximum or other) found until given moment\n    in the sequence.\n    >>> candidate([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
                "prompt1c": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n",
                "prompt1p": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling element.\n    \"\"\"\n",
                "prompt2ac": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling certain type of element (minimal or maximum or other) found until given moment\n    in the sequence.\n    >>> candidate([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n",
                "prompt2ap": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling element.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
                "test_case": "[{'input': '[]', 'output': '[]', 'relation': '=='}, {'input': '[1, 2, 3, 4]', 'output': '[1, 2, 3, 4]', 'relation': '=='}, {'input': '[4, 3, 2, 1]', 'output': '[4, 4, 4, 4]', 'relation': '=='}, {'input': '[3, 2, 3, 100, 3]', 'output': '[3, 3, 3, 100, 100]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 10,
            "row": {
                "entry_point": "make_palindrome",
                "name": "HumanEval/10",
                "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
                "prompt1a": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef candidate(string: str) -> str:\n    \"\"\" Find the longest or shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the shortest or longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> candidate('')\n    ''\n    >>> candidate('cat')\n    'catac'\n    >>> candidate('cata')\n    'catac'\n    \"\"\"\n",
                "prompt1c": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'ata'\n    >>> make_palindrome('cata')\n    'ata'\n    \"\"\"\n",
                "prompt1p": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef candidate(string: str) -> str:\n    \"\"\" Find the longest or shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the shortest or longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> candidate('')\n    ''\n    >>> candidate('cat')\n    'ata'\n    >>> candidate('cata')\n    'ata'\n    \"\"\"\n",
                "prompt2ap": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef candidate(string: str) -> str:\n    \"\"\" Find the longest or shortest palindrome.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
                "test_case": "[{'input': \"''\", 'output': '', 'relation': '=='}, {'input': \"'x'\", 'output': 'x', 'relation': '=='}, {'input': \"'xyz'\", 'output': 'xyzyx', 'relation': '=='}, {'input': \"'xyx'\", 'output': 'xyx', 'relation': '=='}, {'input': \"'jerry'\", 'output': 'jerryrrej', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 11,
            "row": {
                "entry_point": "string_xor",
                "name": "HumanEval/11",
                "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform certain bitwise operation on these inputs and return result also as a string.\n    >>> candidate('010', '110')\n    '100'\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '011'\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef candidate(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform certain bitwise operation on these inputs and return result also as a string.\n    >>> candidate('010', '110')\n    '011'\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
                "test_case": "[{'input': \"'111000', '101010'\", 'output': '010010', 'relation': '=='}, {'input': \"'1', '1'\", 'output': '0', 'relation': '=='}, {'input': \"'0101', '0000'\", 'output': '0101', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 12,
            "row": {
                "entry_point": "longest",
                "name": "HumanEval/12",
                "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
                "prompt1a": "from typing import List, Optional\n\n\ndef candidate(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return a certain one (the shortest or longest or another). Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> candidate([])\n\n    >>> candidate(['a', 'b', 'c'])\n    'a'\n    >>> candidate(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
                "prompt1c": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'c'\n    >>> longest(['a', 'bb', 'ccc'])\n    'a'\n    \"\"\"\n",
                "prompt1p": "from typing import List, Optional\n\n\ndef candidate(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return one of them. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n",
                "prompt2ac": "from typing import List, Optional\n\n\ndef candidate(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return a certain one (the shortest or longest or another). Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> candidate([])\n\n    >>> candidate(['a', 'b', 'c'])\n    'c'\n    >>> candidate(['a', 'bb', 'ccc'])\n    'a'\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
                "test_case": "[{'input': '[]', 'output': 'None', 'relation': '=='}, {'input': \"['x', 'y', 'z']\", 'output': 'x', 'relation': '=='}, {'input': \"['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']\", 'output': 'zzzz', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 13,
            "row": {
                "entry_point": "greatest_common_divisor",
                "name": "HumanEval/13",
                "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(a: int, b: int) -> int:\n    \"\"\" Return a common divisor of two integers a and b\n    >>> candidate(3, 5)\n    1\n    >>> candidate(25, 15)\n    5\n    \"\"\"\n",
                "prompt1c": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    3\n    >>> greatest_common_divisor(25, 15)\n    15\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(...) -> int:\n    \"\"\" Return a greatest common divisor\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(a: int, b: int) -> int:\n    \"\"\" Return a common divisor of two integers a and b\n    >>> candidate(3, 5)\n    3\n    >>> candidate(25, 15)\n    15\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(...) -> int:\n    \"\"\" Return a common divisor\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n",
                "test_case": "[{'input': '3, 7', 'output': '1', 'relation': '=='}, {'input': '10, 15', 'output': '5', 'relation': '=='}, {'input': '49, 14', 'output': '7', 'relation': '=='}, {'input': '144, 60', 'output': '12', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 14,
            "row": {
                "entry_point": "all_prefixes",
                "name": "HumanEval/14",
                "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(string: str) -> List[str]:\n    \"\"\" Return list of a certain pattern (suffixes or prefixes or other types of substring) from shortest to longest of the input string\n    >>> candidate('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['abc', 'ab', 'a']\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(string: str) -> List[str]:\n    \"\"\" Return list of a certain pattern (suffixes or prefixes or other types of substring) from shortest to longest of the input string\n    >>> candidate('abc')\n    ['abc', 'ab', 'a']\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(string: str) -> List[str]:\n    \"\"\" Return list of a certain patter\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
                "test_case": "[{'input': \"''\", 'output': '[]', 'relation': '=='}, {'input': \"'asdfgh'\", 'output': \"['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\", 'relation': '=='}, {'input': \"'WWW'\", 'output': \"['W', 'WW', 'WWW']\", 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 15,
            "row": {
                "entry_point": "string_sequence",
                "name": "HumanEval/15",
                "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
                "prompt1a": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing dot or space-delimited numbers starting from 0 upto a certain number inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
                "prompt1c": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0.1.2.3.4.5'\n    \"\"\"\n",
                "prompt1p": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers.\n",
                "prompt2ac": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing dot or space-delimited numbers starting from 0 upto a certain number inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0.1.2.3.4.5'\n    \"\"\"\n",
                "prompt2ap": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing dot or space-delimited numbers.\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join([str(x) for x in range(n + 1)])\n",
                "test_case": "[{'input': '0', 'output': '0', 'relation': '=='}, {'input': '3', 'output': '0 1 2 3', 'relation': '=='}, {'input': '10', 'output': '0 1 2 3 4 5 6 7 8 9 10', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 16,
            "row": {
                "entry_point": "count_distinct_characters",
                "name": "HumanEval/16",
                "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(string: str) -> int:\n    \"\"\" Given a string, find out how many characters (regardless of case) does it consist of\n    >>> candidate('xyzXYZ')\n    3\n    >>> candidate('Jerry')\n    4\n    \"\"\"\n",
                "prompt1c": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    5\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters does it consist of\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(string: str) -> int:\n    \"\"\" Given a string, find out how many characters (regardless of case) does it consist of\n    >>> candidate('xyzXYZ')\n    6\n    >>> candidate('Jerry')\n    5\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(string: str) -> int:\n    \"\"\" Given a string, find out how many characters (regardless of case) does it consist of\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n",
                "test_case": "[{'input': \"''\", 'output': '0', 'relation': '=='}, {'input': \"'abcde'\", 'output': '5', 'relation': '=='}, {'input': \"'abcde' + 'cade' + 'CADE'\", 'output': '5', 'relation': '=='}, {'input': \"'aaaaAAAAaaaa'\", 'output': '1', 'relation': '=='}, {'input': \"'Jerry jERRY JeRRRY'\", 'output': '5', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 17,
            "row": {
                "entry_point": "parse_music",
                "name": "HumanEval/17",
                "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts A beats\n    'o|' - half note, lasts B beats\n    '.|' - quater note, lasts C beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [1, 4, 2, 4, 4, 2, 2, 2, 2, 1, 1]\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts A beats\n    'o|' - half note, lasts B beats\n    '.|' - quater note, lasts C beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [1, 4, 2, 4, 4, 2, 2, 2, 2, 1, 1]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
                "test_case": "[{'input': \"''\", 'output': '[]', 'relation': '=='}, {'input': \"'o o o o'\", 'output': '[4, 4, 4, 4]', 'relation': '=='}, {'input': \"'.| .| .| .|'\", 'output': '[1, 1, 1, 1]', 'relation': '=='}, {'input': \"'o| o| .| .| o o o o'\", 'output': '[2, 2, 1, 1, 4, 4, 4, 4]', 'relation': '=='}, {'input': \"'o| .| o| .| o o| o o|'\", 'output': '[2, 1, 2, 1, 4, 2, 4, 2]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 18,
            "row": {
                "entry_point": "how_many_times",
                "name": "HumanEval/18",
                "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(a: str, b: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
                "prompt1c": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    2\n    \"\"\"\n",
                "prompt1p": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(a: str, b: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> canidate('', 'a')\n    0\n    >>> candidate('aaa', 'a')\n    3\n    >>> candidate('aaaa', 'aa')\n    2\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(a: str, b: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
                "test_case": "[{'input': \"'', 'x'\", 'output': '0', 'relation': '=='}, {'input': \"'xyxyxyx', 'x'\", 'output': '4', 'relation': '=='}, {'input': \"'cacacacac', 'cac'\", 'output': '4', 'relation': '=='}, {'input': \"'john doe', 'john'\", 'output': '1', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 19,
            "row": {
                "entry_point": "sort_numbers",
                "name": "HumanEval/19",
                "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers in a certain order (sorted descendingly or ascendingly or another order) \n    >>> candidate('three one five')\n    'one three five'\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'five three one'\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals.\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers in a certain order (sorted descendingly or ascendingly or another order)\n    >>> candidate('three one five')\n    'five three one'\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
                "test_case": "[{'input': \"''\", 'output': '', 'relation': '=='}, {'input': \"'three'\", 'output': 'three', 'relation': '=='}, {'input': \"'three five nine'\", 'output': 'three five nine', 'relation': '=='}, {'input': \"'five zero four seven nine eight'\", 'output': 'zero four five seven eight nine', 'relation': '=='}, {'input': \"'six five four three two one zero'\", 'output': 'zero one two three four five six', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 20,
            "row": {
                "entry_point": "find_closest_elements",
                "name": "HumanEval/20",
                "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
                "prompt1a": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the farthest or closest to each\n    other and return them in order (smaller number, larger number).\n    >>> candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
                "prompt1c": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (1.0, 5.0)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (1.0, 5.0)\n    \"\"\"\n",
                "prompt1p": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order.\n    \"\"\"\n",
                "prompt2ac": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the farthest or closest to each\n    other and return them in order (smaller number, larger number).\n    >>> candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (1.0, 5.0)\n    >>> candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (1.0, 5.0)\n    \"\"\"\n",
                "prompt2ap": "from typing import List, Tuple\n\n\ndef candidate(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the farthest or closest to each\n    other and return them in order.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
                "test_case": "[{'input': '[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]', 'output': '(3.9, 4.0)', 'relation': '=='}, {'input': '[1.0, 2.0, 5.9, 4.0, 5.0]', 'output': '(5.0, 5.9)', 'relation': '=='}, {'input': '[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]', 'output': '(2.0, 2.2)', 'relation': '=='}, {'input': '[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]', 'output': '(2.0, 2.0)', 'relation': '=='}, {'input': '[1.1, 2.2, 3.1, 4.1, 5.1]', 'output': '(2.2, 3.1)', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 21,
            "row": {
                "entry_point": "rescale_to_unit",
                "name": "HumanEval/21",
                "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef rescale(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the one number will become 0 and another will become 1\n    >>> rescale([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [1.0, 0.75, 0.5, 0.25, 0.0]\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef rescale(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef rescale(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the one number will become 0 and another will become 1\n    >>> rescale([1.0, 2.0, 3.0, 4.0, 5.0])\n    [1.0, 0.75, 0.5, 0.25, 0.0]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
                "test_case": "[{'input': '[2.0, 49.9]', 'output': '[0.0, 1.0]', 'relation': '=='}, {'input': '[100.0, 49.9]', 'output': '[1.0, 0.0]', 'relation': '=='}, {'input': '[1.0, 2.0, 3.0, 4.0, 5.0]', 'output': '[0.0, 0.25, 0.5, 0.75, 1.0]', 'relation': '=='}, {'input': '[2.0, 1.0, 5.0, 3.0, 4.0]', 'output': '[0.25, 0.0, 1.0, 0.5, 0.75]', 'relation': '=='}, {'input': '[12.0, 11.0, 15.0, 13.0, 14.0]', 'output': '[0.25, 0.0, 1.0, 0.5, 0.75]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 22,
            "row": {
                "entry_point": "filter_integers",
                "name": "HumanEval/22",
                "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
                "prompt1a": "from typing import List, Any\n\n\ndef candidate(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for certain types\n    >>> candidate(['a', 3.14, 5])\n    [5]\n    >>> candidate([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
                "prompt1c": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    ['a']\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    \"\"\"\n",
                "prompt1p": "from typing import List, Any\n\n\ndef candidate(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values\n    \"\"\"\n",
                "prompt2ac": "from typing import List, Any\n\n\ndef candidate(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for certain types\n    >>> candidate(['a', 3.14, 5])\n    ['a']\n    >>> candidate([1, 2, 3, 'abc', {}, []])\n    ['abc']\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]\n",
                "test_case": "[{'input': '[]', 'output': '[]', 'relation': '=='}, {'input': \"[4, {}, [], 23.2, 9, 'adasd']\", 'output': '[4, 9]', 'relation': '=='}, {'input': \"[3, 'c', 3, 3, 'a', 'b']\", 'output': '[3, 3, 3]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 23,
            "row": {
                "entry_point": "strlen",
                "name": "HumanEval/23",
                "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(string: str) -> int:\n    \"\"\" Return length or length of Longest Palindrome Substring of the given string\n    >>> candidate('')\n    0\n    >>> candidate('abc')\n    3\n    \"\"\"\n",
                "prompt1c": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    1\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(string: str) -> int:\n    \"\"\" Return length\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(string: str) -> int:\n    \"\"\" Return length or length of Longest Palindrome Substring of the given string\n    >>> candidate('')\n    0\n    >>> candidate('abc')\n    1\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(string: str) -> int:\n    \"\"\" Return length or length of Longest Palindrome Substring\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
                "test_case": "[{'input': \"''\", 'output': '0', 'relation': '=='}, {'input': \"'x'\", 'output': '1', 'relation': '=='}, {'input': \"'asdasnakj'\", 'output': '9', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 24,
            "row": {
                "entry_point": "largest_divisor",
                "name": "HumanEval/24",
                "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(n: int) -> int:\n    \"\"\" For a given number n, find the smallest or largest number that divides n evenly, smaller than n\n    >>> candidate(15)\n    5\n    \"\"\"\n",
                "prompt1c": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    1\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(n: int) -> int:\n    \"\"\" For a given number n, find the smallest or largest number that divides n evenly, smaller than n\n    >>> candidate(15)\n    1\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(n: int) -> int:\n    \"\"\" For a given number n, find the smallest or largest number that divides n evenly\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
                "test_case": "[{'input': '3', 'output': '1', 'relation': '=='}, {'input': '7', 'output': '1', 'relation': '=='}, {'input': '10', 'output': '5', 'relation': '=='}, {'input': '100', 'output': '50', 'relation': '=='}, {'input': '49', 'output': '7', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 25,
            "row": {
                "entry_point": "factorize",
                "name": "HumanEval/25",
                "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(n: int) -> List[int]:\n    \"\"\" Return list of factors of given integer in the descending or ascending order.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> candidate(8)\n    [2, 2, 2]\n    >>> candidate(25)\n    [5, 5]\n    >>> candidate(70)\n    [2, 5, 7]\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 4, 8]\n    >>> factorize(25)\n    [5, 25]\n    >>> factorize(70)\n    [2, 10, 70]\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef candidate(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer.\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(n: int) -> List[int]:\n    \"\"\" Return list of factors of given integer in the descending or ascending order.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> candidate(8)\n    [2, 4, 8]\n    >>> candidate(25)\n    [5, 25]\n    >>> candidate(70)\n    [2, 10, 70]\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(n: int) -> List[int]:\n    \"\"\" Return list of factors of given integer.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
                "test_case": "[{'input': '2', 'output': '[2]', 'relation': '=='}, {'input': '4', 'output': '[2, 2]', 'relation': '=='}, {'input': '8', 'output': '[2, 2, 2]', 'relation': '=='}, {'input': '3 * 19', 'output': '[3, 19]', 'relation': '=='}, {'input': '3 * 19 * 3 * 19', 'output': '[3, 3, 19, 19]', 'relation': '=='}, {'input': '3 * 19 * 3 * 19 * 3 * 19', 'output': '[3, 3, 3, 19, 19, 19]', 'relation': '=='}, {'input': '3 * 19 * 19 * 19', 'output': '[3, 19, 19, 19]', 'relation': '=='}, {'input': '3 * 2 * 3', 'output': '[2, 3, 3]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 26,
            "row": {
                "entry_point": "remove_duplicates",
                "name": "HumanEval/26",
                "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur K time(s).\n    Keep order of elements left the same as in the input.\n    >>> candidate([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef candidate(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur.\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur K time(s).\n    Keep order of elements left the same as in the input.\n    >>> candidate([1, 2, 3, 2, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n",
                "prompt2ap": "from typing import List\n\n\ndef candidate(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur K time(s).\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
                "test_case": "[{'input': '[]', 'output': '[]', 'relation': '=='}, {'input': '[1, 2, 3, 4]', 'output': '[1, 2, 3, 4]', 'relation': '=='}, {'input': '[1, 2, 3, 2, 4, 3, 5]', 'output': '[1, 4, 5]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 27,
            "row": {
                "entry_point": "flip_case",
                "name": "HumanEval/27",
                "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(string: str) -> str:\n    \"\"\" For a given string, flip lowercase or uppercase characters to either uppercase or lowercase.\n    >>> candidate('Hello')\n    'hELLO'\n    \"\"\"\n",
                "prompt1c": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hello'\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(string: str) -> str:\n    \"\"\" For a given string, flip lowercase or uppercase characters to either uppercase or lowercase.\n    >>> candidate('Hello')\n    'hello'\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(string: str) -> str:\n    \"\"\" For a given string, flip lowercase or uppercase characters to either uppercase or lowercase.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n",
                "test_case": "[{'input': \"''\", 'output': '', 'relation': '=='}, {'input': \"'Hello!'\", 'output': 'hELLO!', 'relation': '=='}, {'input': \"'These violent delights have violent ends'\", 'output': 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 28,
            "row": {
                "entry_point": "concatenate",
                "name": "HumanEval/28",
                "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string with space or without space\n    >>> candidate([])\n    ''\n    >>> candidate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'c b a'\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef candidate(strings: List[str]) -> str:\n    \"\"\" Concatenate\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string with space or without space\n    >>> candidate([])\n    ''\n    >>> candidate(['a', 'b', 'c'])\n    'c b a'\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
                "test_case": "[{'input': '[]', 'output': '', 'relation': '=='}, {'input': \"['x', 'y', 'z']\", 'output': 'xyz', 'relation': '=='}, {'input': \"['x', 'y', 'z', 'w', 'k']\", 'output': 'xyzwk', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 29,
            "row": {
                "entry_point": "filter_by_prefix",
                "name": "HumanEval/29",
                "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
                "prompt1a": "from typing import List\n\n\ndef candidate(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that satisfy certain condition with a given prefix.\n    >>> candidate([], 'a')\n    []\n    >>> candidate(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
                "prompt1c": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['bcd', 'cde']\n    \"\"\"\n",
                "prompt1p": "from typing import List\n\n\ndef candidate(strings: List[str], x: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones.\n    \"\"\"\n",
                "prompt2ac": "from typing import List\n\n\ndef candidate(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that satisfy certain condition with a given prefix.\n    >>> candidate([], 'a')\n    []\n    >>> candidate(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['bcd', 'cde']\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [x for x in strings if x.startswith(prefix)]\n",
                "test_case": "[{'input': \"[], 'john'\", 'output': '[]', 'relation': '=='}, {'input': \"['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'\", 'output': \"['xxx', 'xxxAAA', 'xxx']\", 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 30,
            "row": {
                "entry_point": "get_positive",
                "name": "HumanEval/30",
                "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list):\n    \"\"\"Return only negative or positive numbers in the list.\n    >>> candidate([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
                "prompt1c": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list):\n    \"\"\"\n    >>> candidate([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list):\n    \"\"\"Return only negative or positive numbers in the list.\n    >>> candidate([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\n\ndef candidate(l: list):\n    \"\"\"\n    >>> candidate([-1, 2, -4, 5, 6])\n    [-1, -4]\n    >>> candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [e for e in l if e > 0]\n",
                "test_case": "[{'input': '[-1, -2, 4, 5, 6]', 'output': '[4, 5, 6]', 'relation': '=='}, {'input': '[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]', 'output': '[5, 3, 2, 3, 3, 9, 123, 1]', 'relation': '=='}, {'input': '[-1, -2]', 'output': '[]', 'relation': '=='}, {'input': '[]', 'output': '[]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 31,
            "row": {
                "entry_point": "is_prime",
                "name": "HumanEval/31",
                "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(n):\n    \"\"\"Return true if a given number is composite or prime, and false otherwise.\n    >>> candidate(6)\n    False\n    >>> candidate(101)\n    True\n    >>> candidate(11)\n    True\n    >>> candidate(13441)\n    True\n    >>> candidate(61)\n    True\n    >>> candidate(4)\n    False\n    >>> candidate(1)\n    False\n    \"\"\"\n",
                "prompt1c": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    True\n    >>> is_prime(101)\n    False\n    >>> is_prime(11)\n    False\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    False\n    >>> is_prime(4)\n    True\n    >>> is_prime(1)\n    True\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(n):\n    \"\"\"Return true, and false otherwise. \n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(n):\n    \"\"\"Return true if a given number is composite or prime, and false otherwise.\n    >>> candidate(6)\n    True\n    >>> candidate(101)\n    False\n    >>> candidate(11)\n    False\n    >>> candidate(13441)\n    False\n    >>> candidate(61)\n    False\n    >>> candidate(4)\n    True\n    >>> candidate(1)\n    True\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
                "test_case": "[{'input': '6', 'output': 'False', 'relation': '=='}, {'input': '101', 'output': 'True', 'relation': '=='}, {'input': '11', 'output': 'True', 'relation': '=='}, {'input': '13441', 'output': 'True', 'relation': '=='}, {'input': '61', 'output': 'True', 'relation': '=='}, {'input': '4', 'output': 'False', 'relation': '=='}, {'input': '1', 'output': 'False', 'relation': '=='}, {'input': '5', 'output': 'True', 'relation': '=='}, {'input': '11', 'output': 'True', 'relation': '=='}, {'input': '17', 'output': 'True', 'relation': '=='}, {'input': '5 * 17', 'output': 'False', 'relation': '=='}, {'input': '11 * 7', 'output': 'False', 'relation': '=='}, {'input': '13441 * 19', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 32,
            "row": {
                "entry_point": "find_zero",
                "name": "HumanEval/32",
                "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
                "prompt1a": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef candidate(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    candidate find x such that poly(x) is positive or negative or 0.\n    candidate returns only only zero point, even if there are many.\n    Moreover, candidate only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(candidate([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(candidate([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
                "prompt1c": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -3.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    0.0\n    \"\"\"\n",
                "prompt1p": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x.\n    \"\"\"\n",
                "prompt2ac": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef candidate(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    candidate find x such that poly(x) is positive or negative or 0.\n    candidate returns only only zero point, even if there are many.\n    Moreover, candidate only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(candidate([1, 2]), 2) # f(x) = 1 + 2x\n    -3.5\n    >>> round(candidate([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    0.0\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
                "test_case": "[{'input': [-10, -2], 'output': 1.1641532182693481e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-3, -6, -7, 7], 'output': 9.76619674020185e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [8, 3], 'output': 5.820766091346741e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-10, -8], 'output': 4.656612873077393e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-3, 6, 9, -10], 'output': 1.337379096355562e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [10, 7, 3, -3], 'output': 1.3840022461408807e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [8, -2, -10, -5, 3, 1, -2, -6], 'output': 6.92455426332117e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, -7, -8, 2], 'output': 2.1342083655895294e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, 1], 'output': 0.0, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-9, 4, 7, -7, 2, -8], 'output': 1.1405965061328516e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [10, 9, 1, 8, -4, -8], 'output': 4.0877967677488414e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-3, -1], 'output': 5.820766091346741e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-3, -7], 'output': 5.820766091346741e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-2, 4, 10, 1, -5, 1, 1, -4], 'output': 4.5996983999430086e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [10, -8, 9, 10, -5, 7], 'output': 4.412106235918145e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-5, 4, 2, -2], 'output': 7.292131343206165e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, -9, -3, -9], 'output': 1.7145054993783493e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [2, -2, -8, -4, 8, 1], 'output': 3.6866111552402714e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [10, 5, 2, 10], 'output': 1.015466821741029e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-6, -2, -6, -3, 7, 7, -2, 8], 'output': 2.469873194854699e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [8, 2, 1, -3, -6, 6, 5, -8], 'output': 4.654125973502232e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-7, -6], 'output': 1.1641532182693481e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [3, 9, -8, 2], 'output': 4.748736473492166e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [9, 4, 6, -2, 7, -10, -7, 7], 'output': 1.0656506788109255e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [10, 1, -7, -1, 3, -5], 'output': 6.19443163429878e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-10, -2, 6, -5, 6, -7, 10, -1], 'output': 1.039987151951749e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-6, 1, -5, 7], 'output': 8.558842523598287e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [9, 1], 'output': 5.820766091346741e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-10, -7, 1, -1, -3, -9, -3, 8], 'output': 9.059419880941277e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-8, 5], 'output': 1.1641532182693481e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [7, -6], 'output': 2.3283064365386963e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [5, 7, -5, -2], 'output': 3.864730757641155e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-4, 7, -4, -1, 2, 10, 1, 4], 'output': 1.152398176884617e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-7, -3, -3, -8, 1, -10, 8, 7], 'output': 1.1465629556894896e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [8, -3, -10, -8], 'output': 8.052962741089686e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-3, -8], 'output': 4.656612873077393e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, -8], 'output': 4.656612873077393e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-2, 5, -4, 7], 'output': 2.8748137204104296e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [8, 8, 5, -3], 'output': 7.751452812954085e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [3, -4, -7, -7, 3, 1, 3, 3], 'output': 3.0882091502093534e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-9, 10, 10, -7, -9, 2, 1, -7], 'output': 2.323840675444444e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-4, -4, 7, 4], 'output': 0.0, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [3, -5, -2, 4], 'output': 2.471778337564956e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-8, 4, 7, -7], 'output': 5.787530454881562e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [10, 7], 'output': 5.820766091346741e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-8, -3], 'output': 5.820766091346741e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [3, 5, 5, -4], 'output': 4.028066769024008e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-9, -5, 2, -10, 2, -2, 4, -1], 'output': 1.2186199688235533e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [7, 5, -6, -4, -1, -4, -9, 8], 'output': 7.55201901014857e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, -9], 'output': 4.0745362639427185e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [8, 5], 'output': 1.7462298274040222e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-9, 6, -8, -5], 'output': 7.17989223630866e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [9, -8], 'output': 4.656612873077393e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [2, -7, 8, -3], 'output': 1.2934986415302774e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [9, -8], 'output': 4.656612873077393e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [8, 8, 6, 1, -2, -4, 1, -3], 'output': 8.968825682131865e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [2, -6, 10, -1, 4, 1], 'output': 1.2246800906723365e-08, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-10, 4], 'output': 2.3283064365386963e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-8, 7], 'output': 1.1641532182693481e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [6, -2, -6, 1], 'output': 4.1145209461745935e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-3, 1], 'output': 5.820766091346741e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-5, 4, 7, -1, 9, 10], 'output': 2.8451518918615193e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [7, -1], 'output': 5.820766091346741e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-6, -2], 'output': 1.1641532182693481e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-7, 7], 'output': 4.0745362639427185e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-2, -1, 9, -4], 'output': 5.314582107729393e-12, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-4, 10, -2, 6, 5, -2], 'output': 5.341000801351026e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-8, 10], 'output': 1.1641532182693481e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-2, -9, -10, 1, -6, 10, -2, -5], 'output': 1.4370016288012266e-08, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [7, 3, 7, -10, -7, -8, -6, 7], 'output': 1.0816925133383393e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, 8], 'output': 4.656612873077393e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [3, -6, -9, -1], 'output': 4.090063773776187e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-9, 1, -4, -3, -7, 1], 'output': 6.964910426177084e-08, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [9, -6, -3, -5, -5, 3, -10, -5], 'output': 1.3005894139439533e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [3, -3, -2, -5, -7, 2], 'output': 0.0, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [5, -3], 'output': 1.1641532182693481e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [4, 1, -1, -3], 'output': 1.2522427539352066e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-10, -4, 2, 1], 'output': 7.0775918459276e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-8, -2, 1, 10, 6, 2], 'output': 1.0347153134304676e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-10, -7, -2, -5, 8, -2], 'output': 4.458877711499554e-12, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-7, 9], 'output': 2.3283064365386963e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, 1, 3, 9, 6, -7, 2, 8], 'output': 6.708447131131834e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-2, -9, 3, -10], 'output': 1.3271347909515896e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, 3, -8, 1], 'output': 9.151792171313566e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-7, -1, 6, -1, 3, 1], 'output': 9.165997960636219e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-1, 7, -6, -4, 3, 2, -5, 9], 'output': 1.2270528522298832e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [2, 7, -10, -1, -1, -4], 'output': 8.104050763790838e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [8, 9, 10, 1, 4, 4, 4, -4], 'output': 2.9445686777762603e-08, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-5, -8, -1, 6, 10, 9, 1, -8], 'output': 2.796114451086851e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-1, -3, -4, -6], 'output': 8.562428543967826e-11, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-9, -3], 'output': 1.7462298274040222e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [9, -8, 4, 3, 10, 8, -4, 2], 'output': 4.614358672938579e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [2, -3, -6, 10, -10, -7, 3, -3], 'output': 2.5733340805467186e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [6, 4, -9, 7], 'output': 4.689382215872229e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-7, 4, -6, 4], 'output': 9.2210683533267e-12, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [4, 9, 6, 3, 7, 4], 'output': 2.5149304860860866e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [5, 4, -2, -3], 'output': 1.9339907453286287e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [6, 5, 10, -3, -2, 4], 'output': 1.9849579757647007e-09, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [-1, -3], 'output': 1.1641532182693481e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}, {'input': [1, 1, 7, -8, -6, -6], 'output': 4.970059919173764e-10, 'relation': 'from $demo$ import poly\\nimport math\\nsolution = find_zero($input$)\\nprint(math.fabs(poly($input$, solution)) < 1e-4)'}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 33,
            "row": {
                "entry_point": "sort_third",
                "name": "HumanEval/33",
                "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted descendingly or ascendingly.\n    >>> candidate([1, 2, 3])\n    [1, 2, 3]\n    >>> candidate([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
                "prompt1c": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [9, 8, 6, 5, 4, 3, 2]\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted descendingly or ascendingly.\n    >>> candidate([1, 2, 3])\n    [3, 2, 1]\n    >>> candidate([5, 6, 3, 4, 8, 9, 2])\n    [9, 8, 6, 5, 4, 3, 2]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
                "test_case": "[{'input': '[5, 6, 3, 4, 8, 9, 2]', 'output': '[2, 6, 3, 4, 8, 9, 5]', 'relation': '=='}, {'input': '[5, 8, 3, 4, 6, 9, 2]', 'output': '[2, 8, 3, 4, 6, 9, 5]', 'relation': '=='}, {'input': '[5, 6, 9, 4, 8, 3, 2]', 'output': '[2, 6, 9, 4, 8, 3, 5]', 'relation': '=='}, {'input': '[5, 6, 3, 4, 8, 9, 2, 1]', 'output': '[2, 6, 3, 4, 8, 9, 5, 1]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 34,
            "row": {
                "entry_point": "unique",
                "name": "HumanEval/34",
                "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list):\n    \"\"\"Return descending or ascending sorted unique elements in a list\n    >>> candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
                "prompt1c": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [3, 5, 9, 123]\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list):\n    \"\"\"Return elements in a list\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list):\n    \"\"\"Return descending or ascending sorted unique elements in a list\n    >>> candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [3, 5, 9, 123]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
                "test_case": "[{'input': '[5, 3, 5, 2, 3, 3, 9, 0, 123]', 'output': '[0, 2, 3, 5, 9, 123]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 35,
            "row": {
                "entry_point": "max_element",
                "name": "HumanEval/35",
                "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list):\n    \"\"\"Return a certain element in the list.\n    >>> candidate([1, 2, 3])\n    3\n    >>> candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
                "prompt1c": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    1\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list):\n    \"\"\"Return element in the list.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list):\n    \"\"\"Return a certain element in the list.\n    >>> candidate([1, 2, 3])\n    1\n    >>> candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
                "test_case": "[{'input': '[1, 2, 3]', 'output': '3', 'relation': '=='}, {'input': '[5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]', 'output': '124', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 36,
            "row": {
                "entry_point": "fizz_buzz",
                "name": "HumanEval/36",
                "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than k or n*n or n which are divisible by 11 or 13.\n    >>> candidate(50)\n    0\n    >>> candidate(78)\n    2\n    >>> candidate(79)\n    3\n    \"\"\"\n",
                "prompt1c": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    2\n    >>> fizz_buzz(78)\n    4\n    >>> fizz_buzz(79)\n    4\n    \"\"\"\n",
                "prompt1p": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than k or n*n or n which are divisible by 11 or 13.\n    >>> candidate(50)\n    2\n    >>> candidate(78)\n    4\n    >>> candidate(79)\n    4\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
                "test_case": "[{'input': '50', 'output': '0', 'relation': '=='}, {'input': '78', 'output': '2', 'relation': '=='}, {'input': '79', 'output': '3', 'relation': '=='}, {'input': '100', 'output': '3', 'relation': '=='}, {'input': '200', 'output': '6', 'relation': '=='}, {'input': '4000', 'output': '192', 'relation': '=='}, {'input': '10000', 'output': '639', 'relation': '=='}, {'input': '100000', 'output': '8026', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 37,
            "row": {
                "entry_point": "sort_even",
                "name": "HumanEval/37",
                "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted descendingly or ascendingly.\n    >>> candidate([1, 2, 3])\n    [1, 2, 3]\n    >>> candidate([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
                "prompt1c": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [3, 2, 1]\n    >>> sort_even([5, 6, 3, 4])\n    [6, 5, 4, 3]\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted descendingly or ascendingly.\n    >>> candidate([1, 2, 3])\n    [3, 2, 1]\n    >>> candidate([5, 6, 3, 4])\n    [6, 5, 4, 3]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
                "test_case": "[{'input': '[1, 2, 3]', 'output': '[1, 2, 3]', 'relation': '=='}, {'input': '[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]', 'output': '[-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]', 'relation': '=='}, {'input': '[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]', 'output': '[-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 38,
            "row": {
                "entry_point": "decode_cyclic",
                "name": "HumanEval/38",
                "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
                "prompt1a": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns encoded or decoded string.\n    \"\"\"\n",
                "prompt1c": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string decoded with encode_cyclic function. Returns encoded string.\n    \"\"\"\n",
                "prompt1p": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. \n    \"\"\"\n",
                "prompt2ac": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string decoded with encode_cyclic function. Returns encoded or decoded string.\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    return encode_cyclic(encode_cyclic(s))\n",
                "test_case": "[{'input': \"'axdhhixdexrvsncacbgh'\", 'output': 'daxihhexdvxrcsnbacgh', 'relation': '=='}, {'input': \"'artwugrnwoshzaizfy'\", 'output': 'targwuwrnhosizayzf', 'relation': '=='}, {'input': \"'iekykgcmdlldiztb'\", 'output': 'kiegykdcmdlltizb', 'relation': '=='}, {'input': \"'dmrrjctlugwsbvchy'\", 'output': 'rdmcrjutlsgwcbvhy', 'relation': '=='}, {'input': \"'hdciomlfulglvi'\", 'output': 'chdmioulfllgvi', 'relation': '=='}, {'input': \"'ctufruhfxmiowruvkhyy'\", 'output': 'uctufrxhfomiuwrhvkyy', 'relation': '=='}, {'input': \"'bzhmikgscw'\", 'output': 'hbzkmicgsw', 'relation': '=='}, {'input': \"'upguomieexrhixr'\", 'output': 'gupmuoeiehxrrix', 'relation': '=='}, {'input': \"'smnhelpcqbdyufevnzt'\", 'output': 'nsmlheqpcybdeufzvnt', 'relation': '=='}, {'input': \"'mtmqioavrxd'\", 'output': 'mmtoqiravxd', 'relation': '=='}, {'input': \"'yirukyjndoafxixyfqqd'\", 'output': 'ryiyukdjnfoaxxiqyfqd', 'relation': '=='}, {'input': \"'uqjgetyflyqrtkaadplz'\", 'output': 'juqtgelyfryqatkpadlz', 'relation': '=='}, {'input': \"'bhhccspcxryyee'\", 'output': 'hbhsccxpcyryee', 'relation': '=='}, {'input': \"'rfpqtigrnxwywjgvumlo'\", 'output': 'prfiqtngryxwgwjmvulo', 'relation': '=='}, {'input': \"'dhockhsrashhcwabhu'\", 'output': 'odhhckasrhshacwubh', 'relation': '=='}, {'input': \"'kcbhiqpgvre'\", 'output': 'bkcqhivpgre', 'relation': '=='}, {'input': \"'phspzzgdnvndnnlxbov'\", 'output': 'sphzpzngddvnlnnoxbv', 'relation': '=='}, {'input': \"'dbuxkmdhzgrgenoiofhc'\", 'output': 'udbmxkzdhggroenfiohc', 'relation': '=='}, {'input': \"'rdzurbcyafnhpgpmb'\", 'output': 'zrdburacyhfnppgmb', 'relation': '=='}, {'input': \"'ammzzijnoxzw'\", 'output': 'mamizzojnwxz', 'relation': '=='}, {'input': \"'wpvgjebsgrbxkbxspb'\", 'output': 'vwpegjgbsxrbxkbbsp', 'relation': '=='}, {'input': \"'fbqcfqtcchmvshdtbs'\", 'output': 'qfbqcfctcvhmdshstb', 'relation': '=='}, {'input': \"'nvcsqsigkwkvimhvuej'\", 'output': 'cnvssqkigvwkhimevuj', 'relation': '=='}, {'input': \"'yckotadcsgqrelich'\", 'output': 'kycaotsdcrgqielch', 'relation': '=='}, {'input': \"'fojwjrzutavqjvr'\", 'output': 'jforwjtzuqavrjv', 'relation': '=='}, {'input': \"'idexrdijetg'\", 'output': 'eiddxreijtg', 'relation': '=='}, {'input': \"'vugqpibciniuakb'\", 'output': 'gvuiqpibcunibak', 'relation': '=='}, {'input': \"'ifuorxnrwdca'\", 'output': 'uifxorwnradc', 'relation': '=='}, {'input': \"'blrresebnlzj'\", 'output': 'rblsrenebjlz', 'relation': '=='}, {'input': \"'gvlvdhyrln'\", 'output': 'lgvhvdlyrn', 'relation': '=='}, {'input': \"'ehxzzfnafxkfnzzxzvh'\", 'output': 'xehfzzfnafxkznzvxzh', 'relation': '=='}, {'input': \"'zwfmbdhgpljozh'\", 'output': 'fzwdmbphgoljzh', 'relation': '=='}, {'input': \"'vgakimyicuqlm'\", 'output': 'avgmkicyiluqm', 'relation': '=='}, {'input': \"'karifdibstndxzlntkqd'\", 'output': 'rkadifsibdtnlxzkntqd', 'relation': '=='}, {'input': \"'giswnbqzavxrxvxg'\", 'output': 'sgibwnaqzrvxxxvg', 'relation': '=='}, {'input': \"'cvntkkdxvqjjnkv'\", 'output': 'ncvktkvdxjqjvnk', 'relation': '=='}, {'input': \"'jrwgnemvvftxjmsr'\", 'output': 'wjregnvmvxftsjmr', 'relation': '=='}, {'input': \"'jgjzsnukto'\", 'output': 'jjgnzstuko', 'relation': '=='}, {'input': \"'vgopzqxfzcjvvuqtk'\", 'output': 'ovgqpzzxfvcjqvutk', 'relation': '=='}, {'input': \"'hvyhzjeagbh'\", 'output': 'yhvjhzgeabh', 'relation': '=='}, {'input': \"'yctnuogwsmpwhemuw'\", 'output': 'tyconusgwwmpmheuw', 'relation': '=='}, {'input': \"'ydynhyzwfq'\", 'output': 'yydynhfzwq', 'relation': '=='}, {'input': \"'rhboedovzrtqyoktx'\", 'output': 'brhdoezovqrtkyotx', 'relation': '=='}, {'input': \"'ronxpfiyouihyqyuhp'\", 'output': 'nrofxpoiyhuiyyqpuh', 'relation': '=='}, {'input': \"'cwohijkrkeechm'\", 'output': 'ocwjhikkrceehm', 'relation': '=='}, {'input': \"'gcwnknonrgnb'\", 'output': 'wgcnnkronbgn', 'relation': '=='}, {'input': \"'swyysapamjylnrmx'\", 'output': 'yswaysmpaljymnrx', 'relation': '=='}, {'input': \"'thzhippankvmzmvfox'\", 'output': 'zthphinpamkvvzmxfo', 'relation': '=='}, {'input': \"'ratssmacvneu'\", 'output': 'tramssvacune', 'relation': '=='}, {'input': \"'bifkgmkkomiyniycp'\", 'output': 'fbimkgokkymiynicp', 'relation': '=='}, {'input': \"'rbxhulyucb'\", 'output': 'xrblhucyub', 'relation': '=='}, {'input': \"'gahehtpved'\", 'output': 'hgatehepvd', 'relation': '=='}, {'input': \"'owgylittfwdxfjysadj'\", 'output': 'gowiylfttxwdyfjdsaj', 'relation': '=='}, {'input': \"'mmvgcwwusdwhjvyzdtz'\", 'output': 'vmmwgcswuhdwyjvtzdz', 'relation': '=='}, {'input': \"'blznvrcqlkaupdnluno'\", 'output': 'zblrnvlcqukanpdnluo', 'relation': '=='}, {'input': \"'fxnuiqzrtpoy'\", 'output': 'nfxquitzrypo', 'relation': '=='}, {'input': \"'sixhckohiosyvmtk'\", 'output': 'xsikhciohyostvmk', 'relation': '=='}, {'input': \"'kfpglpikzi'\", 'output': 'pkfpglziki', 'relation': '=='}, {'input': \"'irwqgahxcprnhwyuwpp'\", 'output': 'wiraqgchxnpryhwpuwp', 'relation': '=='}, {'input': \"'aczhmjhjwslvrqpln'\", 'output': 'zacjhmwhjvslprqln', 'relation': '=='}, {'input': \"'lwkijohdigkxxrdwfy'\", 'output': 'klwoijihdxgkdxrywf', 'relation': '=='}, {'input': \"'xpgxsiqtydgjj'\", 'output': 'gxpixsyqtjdgj', 'relation': '=='}, {'input': \"'fjlwraiberjbw'\", 'output': 'lfjawreibbrjw', 'relation': '=='}, {'input': \"'ypuasdppjkfo'\", 'output': 'uypdasjppokf', 'relation': '=='}, {'input': \"'pdimpcsucv'\", 'output': 'ipdcmpcsuv', 'relation': '=='}, {'input': \"'ezejcsdrhy'\", 'output': 'eezsjchdry', 'relation': '=='}, {'input': \"'tzthytmoqjsojsnt'\", 'output': 'ttzthyqmoojsnjst', 'relation': '=='}, {'input': \"'xdtguyivgc'\", 'output': 'txdygugivc', 'relation': '=='}, {'input': \"'frhfacownpjt'\", 'output': 'hfrcfanowtpj', 'relation': '=='}, {'input': \"'jwhwojvhci'\", 'output': 'hjwjwocvhi', 'relation': '=='}, {'input': \"'vzsndghurieebfcjtzxs'\", 'output': 'svzgndrhueiecbfzjtxs', 'relation': '=='}, {'input': \"'doojwwiqmporct'\", 'output': 'odowjwmiqrpoct', 'relation': '=='}, {'input': \"'xkniathvcs'\", 'output': 'nxktiachvs', 'relation': '=='}, {'input': \"'yvasbiyfyqupifonusp'\", 'output': 'ayvisbyyfpquoifsnup', 'relation': '=='}, {'input': \"'lnpkvkfkdnw'\", 'output': 'plnkkvdfknw', 'relation': '=='}, {'input': \"'vmjrbyckokdimqyav'\", 'output': 'jvmyrbockikdymqav', 'relation': '=='}, {'input': \"'nboqlgyptoyugibejr'\", 'output': 'onbgqltypuoybgirej', 'relation': '=='}, {'input': \"'pdwutahwzjrfrnach'\", 'output': 'wpdautzhwfjrarnch', 'relation': '=='}, {'input': \"'duopweqwjin'\", 'output': 'oduepwjqwin', 'relation': '=='}, {'input': \"'hopemrtqgecxyzink'\", 'output': 'phoremgtqxeciyznk', 'relation': '=='}, {'input': \"'ajijsxvpsorelkpyrr'\", 'output': 'iajxjssvpeorplkryr', 'relation': '=='}, {'input': \"'kgohswhymbknpwxz'\", 'output': 'okgwhsmhynbkxpwz', 'relation': '=='}, {'input': \"'vzmepueqbkdsdqoo'\", 'output': 'mvzuepbeqskdodqo', 'relation': '=='}, {'input': \"'enxecuzipk'\", 'output': 'xenuecpzik', 'relation': '=='}, {'input': \"'muwkvcmkrwyurbpchtu'\", 'output': 'wmuckvrmkuwyprbtchu', 'relation': '=='}, {'input': \"'hxjndcuwyofdjawkzbbj'\", 'output': 'jhxcndyuwdofwjabkzbj', 'relation': '=='}, {'input': \"'nelqnhvzsffftmc'\", 'output': 'lnehqnsvzfffctm', 'relation': '=='}, {'input': \"'hpvehsuioivozoavrjf'\", 'output': 'vhpsehouioivazojvrf', 'relation': '=='}, {'input': \"'lsounjiowjg'\", 'output': 'olsjunwiojg', 'relation': '=='}, {'input': \"'dhpslmjwsavjiams'\", 'output': 'pdhmslsjwjavmias', 'relation': '=='}, {'input': \"'xbyxptyzjtzhhultigvy'\", 'output': 'yxbtxpjyzhtzlhugtivy', 'relation': '=='}, {'input': \"'euvuudjzbbsoxeljkcxn'\", 'output': 'veuduubjzobslxecjkxn', 'relation': '=='}, {'input': \"'ezglqrifqpzi'\", 'output': 'gezrlqqifipz', 'relation': '=='}, {'input': \"'kzxocdyhexvvmz'\", 'output': 'xkzdoceyhvxvmz', 'relation': '=='}, {'input': \"'czlaimdorvxlisvulm'\", 'output': 'lczmairdolvxvismul', 'relation': '=='}, {'input': \"'hpvtrathkuc'\", 'output': 'vhpatrkthuc', 'relation': '=='}, {'input': \"'wjondubbepdjhrdmoelv'\", 'output': 'owjundebbjpddhremolv', 'relation': '=='}, {'input': \"'sxnenxdpunitwlboog'\", 'output': 'nsxxenudptnibwlgoo', 'relation': '=='}, {'input': \"'dvlrulbmlgdio'\", 'output': 'ldvlrulbmigdo', 'relation': '=='}, {'input': \"'guvtauzkbhe'\", 'output': 'vguutabzkhe', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 39,
            "row": {
                "entry_point": "prime_fib",
                "name": "HumanEval/39",
                "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(n: int):\n    \"\"\"\n    candidate returns n-th number that is a Fibonacci number and it's also prime or composite.\n    >>> candidate(1)\n    2\n    >>> candidate(2)\n    3\n    >>> candidate(3)\n    5\n    >>> candidate(4)\n    13\n    >>> candidate(5)\n    89\n    \"\"\"\n",
                "prompt1c": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    20\n    >>> prime_fib(2)\n    30\n    >>> prime_fib(3)\n    50\n    >>> prime_fib(4)\n    130\n    >>> prime_fib(5)\n    890\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(n: int):\n    \"\"\"\n    candidate returns n-th number that is a Fibonacci number.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(n: int):\n    \"\"\"\n    candidate returns n-th number that is a Fibonacci number and it's also prime or composite.\n    >>> candidate(1)\n    20\n    >>> candidate(2)\n    30\n    >>> candidate(3)\n    50\n    >>> candidate(4)\n    130\n    >>> candidate(5)\n    890\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
                "test_case": "[{'input': '1', 'output': '2', 'relation': '=='}, {'input': '2', 'output': '3', 'relation': '=='}, {'input': '3', 'output': '5', 'relation': '=='}, {'input': '4', 'output': '13', 'relation': '=='}, {'input': '5', 'output': '89', 'relation': '=='}, {'input': '6', 'output': '233', 'relation': '=='}, {'input': '7', 'output': '1597', 'relation': '=='}, {'input': '8', 'output': '28657', 'relation': '=='}, {'input': '9', 'output': '514229', 'relation': '=='}, {'input': '10', 'output': '433494437', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 40,
            "row": {
                "entry_point": "triples_sum_to_zero",
                "name": "HumanEval/40",
                "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list):\n    \"\"\"\n    candidate takes a list of integers as an input.\n    it returns True if there are three elements in a list that\n    sum to zero and meet a certain condition (such as they are distinct, they are odd, they are prime, or another condition), and False otherwise.\n\n    >>> candidate([1, 3, 5, 0])\n    False\n    >>> candidate([1, 3, -2, 1])\n    True\n    >>> candidate([1, 2, 3, 7])\n    False\n    >>> candidate([2, 4, -5, 3, 9, 7])\n    True\n    >>> candidate([1])\n    False\n    \"\"\"\n",
                "prompt1c": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    True\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    False\n    >>> triples_sum_to_zero([1])\n    True\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list):\n    \"\"\"\n    candidate takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list,\n    and False otherwise.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list):\n    \"\"\"\n    candidate takes a list of integers as an input.\n    it returns True if there are three elements in a list that\n    sum to zero and meet a certain condition (such as they are distinct, they are odd, they are prime, or another condition), and False otherwise.\n\n    >>> candidate([1, 3, 5, 0])\n    True\n    >>> candidate([1, 3, -2, 1])\n    False\n    >>> candidate([1, 2, 3, 7])\n    True\n    >>> candidate([2, 4, -5, 3, 9, 7])\n    False\n    >>> candidate([1])\n    True\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
                "test_case": "[{'input': '[1, 3, 5, 0]', 'output': 'False', 'relation': '=='}, {'input': '[1, 3, 5, -1]', 'output': 'False', 'relation': '=='}, {'input': '[1, 3, -2, 1]', 'output': 'True', 'relation': '=='}, {'input': '[1, 2, 3, 7]', 'output': 'False', 'relation': '=='}, {'input': '[1, 2, 5, 7]', 'output': 'False', 'relation': '=='}, {'input': '[2, 4, -5, 3, 9, 7]', 'output': 'True', 'relation': '=='}, {'input': '[1]', 'output': 'False', 'relation': '=='}, {'input': '[1, 3, 5, -100]', 'output': 'False', 'relation': '=='}, {'input': '[100, 3, 5, -100]', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 41,
            "row": {
                "entry_point": "car_race_collision",
                "name": "HumanEval/41",
                "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
                "prompt1a": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    2*n or n cars are driving left to right;  simultaneously, a different set of 2*n or n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
                "prompt1c": "\n\ndef is_prime(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    \"\"\"\n",
                "prompt2ac": "\n\ndef is_prime(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    2*n or n cars are driving left to right;  simultaneously, a different set of 2*n or n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n  2*n or n cars are driving left to right;  simultaneously, a different set of 2*n or n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    \"\"\"\n",
                "prompt2cp": "\n\ndef is_prime(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    \"\"\"\n",
                "prompt3acp": "\n\ndef is_prime(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n  2*n or n cars are driving left to right;  simultaneously, a different set of 2*n or n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    \"\"\"\n",
                "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n**2\n",
                "test_case": "[{'input': '2', 'output': '4', 'relation': '=='}, {'input': '3', 'output': '9', 'relation': '=='}, {'input': '4', 'output': '16', 'relation': '=='}, {'input': '8', 'output': '64', 'relation': '=='}, {'input': '10', 'output': '100', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 42,
            "row": {
                "entry_point": "incr_list",
                "name": "HumanEval/42",
                "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
                "prompt1a": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by a number.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
                "prompt1c": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [3, 4, 5]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [7, 5, 7, 4, 5, 5, 11, 2, 125]\n    \"\"\"\n",
                "prompt1p": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by a number.\n    >>> incr_list([1, 2, 3])\n    [3, 4, 5]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [7, 5, 7, 4, 5, 5, 11, 2, 125]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [(e + 1) for e in l]\n",
                "test_case": "[{'input': '[]', 'output': '[]', 'relation': '=='}, {'input': '[3, 2, 1]', 'output': '[4, 3, 2]', 'relation': '=='}, {'input': '[5, 2, 5, 2, 3, 3, 9, 0, 123]', 'output': '[6, 3, 6, 3, 4, 4, 10, 1, 124]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 43,
            "row": {
                "entry_point": "pairs_sum_to_zero",
                "name": "HumanEval/43",
                "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l):\n    \"\"\"\n    candidate takes a list of integers as an input.\n    it returns True if there are elements in the list that\n    sum to zero, and False otherwise.\n    >>> candidate([1, 3, 5, 0])\n    False\n    >>> candidate([1, 3, -2, 1])\n    False\n    >>> candidate([1, 2, 3, 7])\n    False\n    >>> candidate([2, 4, -5, 3, 5, 7])\n    True\n    >>> candidate([1])\n    False\n    \"\"\"\n",
                "prompt1c": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    True\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    False\n    >>> pairs_sum_to_zero([1])\n    True\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l):\n    \"\"\"\n    candidate takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l):\n    \"\"\"\n    candidate takes a list of integers as an input.\n    it returns True if there are elements in the list that\n    sum to zero, and False otherwise.\n    >>> candidate([1, 3, 5, 0])\n    True\n    >>> candidate([1, 3, -2, 1])\n    True\n    >>> candidate([1, 2, 3, 7])\n    True\n    >>> candidate([2, 4, -5, 3, 5, 7])\n    False\n    >>> candidate([1])\n    True\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
                "test_case": "[{'input': '[1, 3, 5, 0]', 'output': 'False', 'relation': '=='}, {'input': '[1, 3, -2, 1]', 'output': 'False', 'relation': '=='}, {'input': '[1, 2, 3, 7]', 'output': 'False', 'relation': '=='}, {'input': '[2, 4, -5, 3, 5, 7]', 'output': 'True', 'relation': '=='}, {'input': '[1]', 'output': 'False', 'relation': '=='}, {'input': '[-3, 9, -1, 3, 2, 30]', 'output': 'True', 'relation': '=='}, {'input': '[-3, 9, -1, 3, 2, 31]', 'output': 'True', 'relation': '=='}, {'input': '[-3, 9, -1, 4, 2, 30]', 'output': 'False', 'relation': '=='}, {'input': '[-3, 9, -1, 4, 2, 31]', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 44,
            "row": {
                "entry_point": "change_base",
                "name": "HumanEval/44",
                "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(x: int, y: int):\n    \"\"\"Change numerical base of input number x or y to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> candidate(8, 3)\n    '22'\n    >>> candidate(8, 2)\n    '1000'\n    >>> candidate(7, 2)\n    '111'\n    \"\"\"\n",
                "prompt1c": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '8'\n    >>> change_base(8, 2)\n    '8'\n    >>> change_base(7, 2)\n    '7'\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(x: int, y: int):\n    \"\"\"Change numerical base of input number x to base.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(x: int, y: int):\n    \"\"\"Change numerical base of input number x or y to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> candidate(8, 3)\n    '8'\n    >>> candidate(8, 2)\n    '8'\n    >>> candidate(7, 2)\n    '7'\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
                "test_case": "[{'input': '8, 3', 'output': '22', 'relation': '=='}, {'input': '9, 3', 'output': '100', 'relation': '=='}, {'input': '234, 2', 'output': '11101010', 'relation': '=='}, {'input': '16, 2', 'output': '10000', 'relation': '=='}, {'input': '8, 2', 'output': '1000', 'relation': '=='}, {'input': '7, 2', 'output': '111', 'relation': '=='}, {'input': '2, 3', 'output': '2', 'relation': '=='}, {'input': '3, 4', 'output': '3', 'relation': '=='}, {'input': '4, 5', 'output': '4', 'relation': '=='}, {'input': '5, 6', 'output': '5', 'relation': '=='}, {'input': '6, 7', 'output': '6', 'relation': '=='}, {'input': '7, 8', 'output': '7', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 45,
            "row": {
                "entry_point": "triangle_area",
                "name": "HumanEval/45",
                "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(x, y):\n    \"\"\"Given length of a side and high return perimeter or area for a triangle.\n    >>> candidate(5, 3)\n    7.5\n    \"\"\"\n",
                "prompt1c": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    15\n    \"\"\"\n",
                "prompt1p": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high, return.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(x, y):\n    \"\"\"Given length of a side and high return perimeter or area for a triangle.\n    >>> candidate(5, 3)\n    15\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2.0\n",
                "test_case": "[{'input': '5, 3', 'output': '7.5', 'relation': '=='}, {'input': '2, 2', 'output': '2.0', 'relation': '=='}, {'input': '10, 8', 'output': '40.0', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 46,
            "row": {
                "entry_point": "fib4",
                "name": "HumanEval/46",
                "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
                "prompt1a": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) +/- fib4(n-2) +/- fib4(n-3) +/- fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    2\n    >>> fib4(6)\n    4\n    >>> fib4(7)\n    6\n    \"\"\"\n",
                "prompt1c": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    0\n    >>> fib4(6)\n    0\n    >>> fib4(7)\n    2\n    \"\"\"\n",
                "prompt1p": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) +/- fib4(n-2) +/- fib4(n-3) +/- fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    2\n    >>> fib4(6)\n    4\n    >>> fib4(7)\n    6\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
                "test_case": "[{'input': '5', 'output': '4', 'relation': '=='}, {'input': '8', 'output': '28', 'relation': '=='}, {'input': '10', 'output': '104', 'relation': '=='}, {'input': '12', 'output': '386', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 47,
            "row": {
                "entry_point": "median",
                "name": "HumanEval/47",
                "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list):\n    \"\"\"Return max or median of elements in the list l.\n    >>> candidate([3, 1, 2, 4, 5])\n    3\n    >>> candidate([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
                "prompt1c": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    5\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    1000\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list):\n    \"\"\"Return of elements in the list l.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list):\n    \"\"\"Return max or median of elements in the list l.\n    >>> candidate([3, 1, 2, 4, 5])\n    5\n    >>> candidate([-10, 4, 6, 1000, 10, 20])\n    1000\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
                "test_case": "[{'input': '[3, 1, 2, 4, 5]', 'output': '3', 'relation': '=='}, {'input': '[-10, 4, 6, 1000, 10, 20]', 'output': '8.0', 'relation': '=='}, {'input': '[5]', 'output': '5', 'relation': '=='}, {'input': '[6, 5]', 'output': '5.5', 'relation': '=='}, {'input': '[8, 1, 3, 9, 9, 2, 7]', 'output': '7 ', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 48,
            "row": {
                "entry_point": "is_palindrome",
                "name": "HumanEval/48",
                "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(text: str):\n    \"\"\"\n    Checks if given string is an Isogram/Palindrome or not \n    >>> candidate('')\n    True\n    >>> candidate('aba')\n    True\n    >>> candidate('aaaaa')\n    True\n    >>> candidate('zbcd')\n    False\n    \"\"\"\n",
                "prompt1c": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    False\n    >>> is_palindrome('aba')\n    False\n    >>> is_palindrome('aaaaa')\n    False\n    >>> is_palindrome('zbcd')\n    True\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(text: str):\n    \"\"\"\n    Checks if given string is a \n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(text: str):\n    \"\"\"\n    Checks if given string is an Isogram/Palindrome or not \n    >>> candidate('')\n    False\n    >>> candidate('aba')\n    False\n    >>> candidate('aaaaa')\n    False\n    >>> candidate('zbcd')\n    True\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
                "test_case": "[{'input': \"''\", 'output': 'True', 'relation': '=='}, {'input': \"'aba'\", 'output': 'True', 'relation': '=='}, {'input': \"'aaaaa'\", 'output': 'True', 'relation': '=='}, {'input': \"'zbcd'\", 'output': 'False', 'relation': '=='}, {'input': \"'xywyx'\", 'output': 'True', 'relation': '=='}, {'input': \"'xywyz'\", 'output': 'False', 'relation': '=='}, {'input': \"'xywzx'\", 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 49,
            "row": {
                "entry_point": "modp",
                "name": "HumanEval/49",
                "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(x: int, y: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> candidate(3, 5)\n    3\n    >>> candidate(1101, 101)\n    2\n    >>> candidate(0, 101)\n    1\n    >>> candidate(3, 11)\n    8\n    >>> candidate(100, 101)\n    1\n    \"\"\"\n",
                "prompt1c": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    5\n    >>> modp(1101, 101)\n    101\n    >>> modp(0, 101)\n    101\n    >>> modp(3, 11)\n    11\n    >>> modp(100, 101)\n    101\n    \"\"\"\n",
                "prompt1p": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(x: int, y: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> candidate(3, 5)\n    5\n    >>> candidate(1101, 101)\n    101\n    >>> candidate(0, 101)\n    101\n    >>> candidate(3, 11)\n    11\n    >>> candidate(100, 101)\n    101\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(x: int, y: int):\n    \"\"\"Return 2^n modulo.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
                "test_case": "[{'input': '3, 5', 'output': '3', 'relation': '=='}, {'input': '1101, 101', 'output': '2', 'relation': '=='}, {'input': '0, 101', 'output': '1', 'relation': '=='}, {'input': '3, 11', 'output': '8', 'relation': '=='}, {'input': '100, 101', 'output': '1', 'relation': '=='}, {'input': '30, 5', 'output': '4', 'relation': '=='}, {'input': '31, 5', 'output': '3', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 50,
            "row": {
                "entry_point": "decode_shift",
                "name": "HumanEval/50",
                "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
                "prompt1a": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string decoded or encoded with encode_shift function. Returns decoded or encoded string.\n    \"\"\"\n",
                "prompt1c": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function which shifts every character by 3. Returns decoded string.\n    \"\"\"\n",
                "prompt1p": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string decoded or encoded with encode_shift function which shifts every character by 3. Returns decoded or encoded string.\n    \"\"\"\n",
                "prompt2ap": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string decoded or encoded with encode_shift function.\n    \"\"\"\n",
                "prompt2cp": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function which shifts every character by 3.\n    \"\"\"\n",
                "prompt3acp": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef candidate(s: str):\n    \"\"\"\n    takes as input string decoded or encoded with encode_shift function which shifts every character by 3.\n    \"\"\"\n",
                "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
                "test_case": "[{'input': \"'ifcnmmjciacwhxsgfhlm'\", 'output': 'daxihhexdvxrcsnbacgh', 'relation': '=='}, {'input': \"'yfwlbzbwsmtxnefdek'\", 'output': 'targwuwrnhosizayzf', 'relation': '=='}, {'input': \"'pnjldpihriqqyneg'\", 'output': 'kiegykdcmdlltizb', 'relation': '=='}, {'input': \"'wirhwozyqxlbhgamd'\", 'output': 'rdmcrjutlsgwcbvhy', 'relation': '=='}, {'input': \"'hmirntzqkqqlan'\", 'output': 'chdmioulfllgvi', 'relation': '=='}, {'input': \"'zhyzkwcmktrnzbwmapdd'\", 'output': 'uctufrxhfomiuwrhvkyy', 'relation': '=='}, {'input': \"'mgeprnhlxb'\", 'output': 'hbzkmicgsw', 'relation': '=='}, {'input': \"'lzurztjnjmcwwnc'\", 'output': 'gupmuoeiehxrrix', 'relation': '=='}, {'input': \"'sxrqmjvuhdgijzkeasy'\", 'output': 'nsmlheqpcybdeufzvnt', 'relation': '=='}, {'input': \"'rrytvnwfaci'\", 'output': 'mmtoqiravxd', 'relation': '=='}, {'input': \"'wdndzpiosktfccnvdkvi'\", 'output': 'ryiyukdjnfoaxxiqyfqd', 'relation': '=='}, {'input': \"'ozvyljqdkwdvfypufiqe'\", 'output': 'juqtgelyfryqatkpadlz', 'relation': '=='}, {'input': \"'mgmxhhcuhdwdjj'\", 'output': 'hbhsccxpcyryee', 'relation': '=='}, {'input': \"'uwknvyslwdcblborazqt'\", 'output': 'prfiqtngryxwgwjmvulo', 'relation': '=='}, {'input': \"'timmhpfxwmxmfhbzgm'\", 'output': 'odhhckasrhshacwubh', 'relation': '=='}, {'input': \"'gphvmnaulwj'\", 'output': 'bkcqhivpgre', 'relation': '=='}, {'input': \"'xumeuesliiasqsstcga'\", 'output': 'sphzpzngddvnlnnoxbv', 'relation': '=='}, {'input': \"'zigrcpeimllwtjskntmh'\", 'output': 'udbmxkzdhggroenfiohc', 'relation': '=='}, {'input': \"'ewigzwfhdmksuulrg'\", 'output': 'zrdburacyhfnppgmb', 'relation': '=='}, {'input': \"'rfrneetosbce'\", 'output': 'mamizzojnwxz', 'relation': '=='}, {'input': \"'abujlolgxcwgcpggxu'\", 'output': 'vwpegjgbsxrbxkbbsp', 'relation': '=='}, {'input': \"'vkgvhkhyhamrixmxyg'\", 'output': 'qfbqcfctcvhmdshstb', 'relation': '=='}, {'input': \"'hsaxxvpnlabpmnrjazo'\", 'output': 'cnvssqkigvwkhimevuj', 'relation': '=='}, {'input': \"'pdhftyxihwlvnjqhm'\", 'output': 'kycaotsdcrgqielch', 'relation': '=='}, {'input': \"'oktwboyezvfawoa'\", 'output': 'jforwjtzuqavrjv', 'relation': '=='}, {'input': \"'jniicwjnoyl'\", 'output': 'eiddxreijtg', 'relation': '=='}, {'input': \"'laznvunghzsngfp'\", 'output': 'gvuiqpibcunibak', 'relation': '=='}, {'input': \"'znkctwbswfih'\", 'output': 'uifxorwnradc', 'relation': '=='}, {'input': \"'wgqxwjsjgoqe'\", 'output': 'rblsrenebjlz', 'relation': '=='}, {'input': \"'qlamaiqdws'\", 'output': 'lgvhvdlyrn', 'relation': '=='}, {'input': \"'cjmkeeksfkcpeseacem'\", 'output': 'xehfzzfnafxkznzvxzh', 'relation': '=='}, {'input': \"'kebirgumltqoem'\", 'output': 'fzwdmbphgoljzh', 'relation': '=='}, {'input': \"'falrpnhdnqzvr'\", 'output': 'avgmkicyiluqm', 'relation': '=='}, {'input': \"'wpfinkxngiysqcepsyvi'\", 'output': 'rkadifsibdtnlxzkntqd', 'relation': '=='}, {'input': \"'xlngbsfvewacccal'\", 'output': 'sgibwnaqzrvxxxvg', 'relation': '=='}, {'input': \"'shapypaicovoasp'\", 'output': 'ncvktkvdxjqjvnk', 'relation': '=='}, {'input': \"'bowjlsarackyxorw'\", 'output': 'wjregnvmvxftsjmr', 'relation': '=='}, {'input': \"'oolsexyzpt'\", 'output': 'jjgnzstuko', 'relation': '=='}, {'input': \"'talvueeckahovazyp'\", 'output': 'ovgqpzzxfvcjqvutk', 'relation': '=='}, {'input': \"'dmaomeljfgm'\", 'output': 'yhvjhzgeabh', 'relation': '=='}, {'input': \"'ydhtszxlbbrurmjzb'\", 'output': 'tyconusgwwmpmheuw', 'relation': '=='}, {'input': \"'ddidsmkebv'\", 'output': 'yydynhfzwq', 'relation': '=='}, {'input': \"'gwmitjetavwypdtyc'\", 'output': 'brhdoezovqrtkyotx', 'relation': '=='}, {'input': \"'swtkcutndmznddvuzm'\", 'output': 'nrofxpoiyhuiyyqpuh', 'relation': '=='}, {'input': \"'thbomnppwhjjmr'\", 'output': 'ocwjhikkrceehm', 'relation': '=='}, {'input': \"'blhsspwtsgls'\", 'output': 'wgcnnkronbgn', 'relation': '=='}, {'input': \"'dxbfdxrufqodrswc'\", 'output': 'yswaysmpaljymnrx', 'relation': '=='}, {'input': \"'eymumnsufrpaaerckt'\", 'output': 'zthphinpamkvvzmxfo', 'relation': '=='}, {'input': \"'ywfrxxafhzsj'\", 'output': 'tramssvacune', 'relation': '=='}, {'input': \"'kgnrpltppdrndsnhu'\", 'output': 'fbimkgokkymiynicp', 'relation': '=='}, {'input': \"'cwgqmzhdzg'\", 'output': 'xrblhucyub', 'relation': '=='}, {'input': \"'mlfyjmjuai'\", 'output': 'hgatehepvd', 'relation': '=='}, {'input': \"'ltbndqkyycbidkoixfo'\", 'output': 'gowiylfttxwdyfjdsaj', 'relation': '=='}, {'input': \"'arrblhxbzmibdoayeie'\", 'output': 'vmmwgcswuhdwyjvtzdz', 'relation': '=='}, {'input': \"'egqwsaqhvzpfsuisqzt'\", 'output': 'zblrnvlcqukanpdnluo', 'relation': '=='}, {'input': \"'skcvznyewdut'\", 'output': 'nfxquitzrypo', 'relation': '=='}, {'input': \"'cxnpmhntmdtxyarp'\", 'output': 'xsikhciohyostvmk', 'relation': '=='}, {'input': \"'upkulqenpn'\", 'output': 'pkfpglziki', 'relation': '=='}, {'input': \"'bnwfvlhmcsuwdmbuzbu'\", 'output': 'wiraqgchxnpryhwpuwp', 'relation': '=='}, {'input': \"'efhomrbmoaxquwvqs'\", 'output': 'zacjhmwhjvslprqln', 'relation': '=='}, {'input': \"'pqbtnonmiclpicwdbk'\", 'output': 'klwoijihdxgkdxrywf', 'relation': '=='}, {'input': \"'lcuncxdvyoilo'\", 'output': 'gxpixsyqtjdgj', 'relation': '=='}, {'input': \"'qkofbwjnggwob'\", 'output': 'lfjawreibbrjw', 'relation': '=='}, {'input': \"'zduifxouutpk'\", 'output': 'uypdasjppokf', 'relation': '=='}, {'input': \"'nuihruhxza'\", 'output': 'ipdcmpcsuv', 'relation': '=='}, {'input': \"'jjexohmiwd'\", 'output': 'eezsjchdry', 'relation': '=='}, {'input': \"'yyeymdvrttoxsoxy'\", 'output': 'ttzthyqmoojsnjst', 'relation': '=='}, {'input': \"'ycidlzlnah'\", 'output': 'txdygugivc', 'relation': '=='}, {'input': \"'mkwhkfstbyuo'\", 'output': 'hfrcfanowtpj', 'relation': '=='}, {'input': \"'mobobthamn'\", 'output': 'hjwjwocvhi', 'relation': '=='}, {'input': \"'xaelsiwmzjnjhgkeoycx'\", 'output': 'svzgndrhueiecbfzjtxs', 'relation': '=='}, {'input': \"'titbobrnvwuthy'\", 'output': 'odowjwmiqrpoct', 'relation': '=='}, {'input': \"'scpynfhmax'\", 'output': 'nxktiachvs', 'relation': '=='}, {'input': \"'fdanxgddkuvztnkxszu'\", 'output': 'ayvisbyyfpquoifsnup', 'relation': '=='}, {'input': \"'uqsppaikpsb'\", 'output': 'plnkkvdfknw', 'relation': '=='}, {'input': \"'oardwgthpnpidrvfa'\", 'output': 'jvmyrbockikdymqav', 'relation': '=='}, {'input': \"'tsglvqyduztdglnwjo'\", 'output': 'onbgqltypuoybgirej', 'relation': '=='}, {'input': \"'buifzyembkowfwshm'\", 'output': 'wpdautzhwfjrarnch', 'relation': '=='}, {'input': \"'tizjubovbns'\", 'output': 'oduepwjqwin', 'relation': '=='}, {'input': \"'umtwjrlyvcjhndesp'\", 'output': 'phoremgtqxeciyznk', 'relation': '=='}, {'input': \"'nfocoxxaujtwuqpwdw'\", 'output': 'iajxjssvpeorplkryr', 'relation': '=='}, {'input': \"'tplbmxrmdsgpcube'\", 'output': 'okgwhsmhynbkxpwz', 'relation': '=='}, {'input': \"'raezjugjvxpitivt'\", 'output': 'mvzuepbeqskdodqo', 'relation': '=='}, {'input': \"'cjszjhuenp'\", 'output': 'xenuecpzik', 'relation': '=='}, {'input': \"'brzhpawrpzbduwgyhmz'\", 'output': 'wmuckvrmkuwyprbtchu', 'relation': '=='}, {'input': \"'omchsidzbitkbofgpego'\", 'output': 'jhxcndyuwdofwjabkzbj', 'relation': '=='}, {'input': \"'qsjmvsxaekkkhyr'\", 'output': 'lnehqnsvzfffctm', 'relation': '=='}, {'input': \"'amuxjmtzntnafetoawk'\", 'output': 'vhpsehouioivazojvrf', 'relation': '=='}, {'input': \"'tqxozsbntol'\", 'output': 'olsjunwiojg', 'relation': '=='}, {'input': \"'uimrxqxobofarnfx'\", 'output': 'pdhmslsjwjavmias', 'relation': '=='}, {'input': \"'dcgycuodemyeqmzlynad'\", 'output': 'yxbtxpjyzhtzlhugtivy', 'relation': '=='}, {'input': \"'ajzizzgoetgxqcjhopcs'\", 'output': 'veuduubjzobslxecjkxn', 'relation': '=='}, {'input': \"'ljewqvvnknue'\", 'output': 'gezrlqqifipz', 'relation': '=='}, {'input': \"'cpeithjdmacare'\", 'output': 'xkzdoceyhvxvmz', 'relation': '=='}, {'input': \"'qherfnwitqacanxrzq'\", 'output': 'lczmairdolvxvismul', 'relation': '=='}, {'input': \"'amufywpymzh'\", 'output': 'vhpatrkthuc', 'relation': '=='}, {'input': \"'tbozsijggouiimwjrtqa'\", 'output': 'owjundebbjpddhremolv', 'relation': '=='}, {'input': \"'sxccjsziuysngbqltt'\", 'output': 'nsxxenudptnibwlgoo', 'relation': '=='}, {'input': \"'qiaqwzqgrnlit'\", 'output': 'ldvlrulbmigdo', 'relation': '=='}, {'input': \"'alzzyfgepmj'\", 'output': 'vguutabzkhe', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 51,
            "row": {
                "entry_point": "remove_vowels",
                "name": "HumanEval/51",
                "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(text):\n    \"\"\"\n    candidate is a function that takes string and returns string with or without vowels.\n    >>> candidate('')\n    ''\n    >>> candidate(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> candidate('abcdef')\n    'bcdf'\n    >>> candidate('aaaaa')\n    'aaaaa'\n    >>> candidate('aaBAA')\n    'B'\n    >>> candidate('zbcd')\n    'zbcd'\n    \"\"\"\n",
                "prompt1c": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'aei'\n    >>> remove_vowels('abcdef')\n    'ae'\n    >>> remove_vowels('aaaaa')\n    'aaaaa'\n    >>> remove_vowels('aaBAA')\n    'aaAA'\n    >>> remove_vowels('zbcd')\n    ''\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(text):\n    \"\"\"\n    candidate is a function that takes string and returns string without.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(text):\n    \"\"\"\n    candidate is a function that takes string and returns string with or without vowels.\n    >>> candidate('')\n    ''\n    >>> candidate(\"abcdef\\nghijklm\")\n    'aei'\n    >>> candidate('abcdef')\n    'ae'\n    >>> candidate('aaaaa')\n    'aaaaa'\n    >>> candidate('aaBAA')\n    'aaAA'\n    >>> candidate('zbcd')\n    ''\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
                "test_case": "[{'input': \"''\", 'output': '', 'relation': '=='}, {'input': '\"abcdef\\\\nghijklm\"', 'output': 'bcdf\\nghjklm', 'relation': '=='}, {'input': \"'fedcba'\", 'output': 'fdcb', 'relation': '=='}, {'input': \"'eeeee'\", 'output': '', 'relation': '=='}, {'input': \"'acBAA'\", 'output': 'cB', 'relation': '=='}, {'input': \"'EcBOO'\", 'output': 'cB', 'relation': '=='}, {'input': \"'ybcd'\", 'output': 'ybcd', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 52,
            "row": {
                "entry_point": "below_threshold",
                "name": "HumanEval/52",
                "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list, t: int):\n    \"\"\"Return True if numbers in the list l are around threshold t.\n    >>> candidate([1, 2, 4, 10], 100)\n    True\n    >>> candidate([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
                "prompt1c": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    False\n    >>> below_threshold([1, 20, 4, 10], 5)\n    True\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list, t: int):\n    \"\"\"Return True if numbers in the list l are around threshold t.\n    >>> candidate([1, 2, 4, 10], 100)\n    False\n    >>> candidate([1, 20, 4, 10], 5)\n    True\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            return False\n    return True\n",
                "test_case": "[{'input': '[1, 2, 4, 10], 100', 'output': 'True', 'relation': '=='}, {'input': '[1, 20, 4, 10], 5', 'output': 'False', 'relation': '=='}, {'input': '[1, 20, 4, 10], 21', 'output': 'True', 'relation': '=='}, {'input': '[1, 20, 4, 10], 22', 'output': 'True', 'relation': '=='}, {'input': '[1, 8, 4, 10], 11', 'output': 'True', 'relation': '=='}, {'input': '[1, 8, 4, 10], 10', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 53,
            "row": {
                "entry_point": "add",
                "name": "HumanEval/53",
                "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(x: int, y: int):\n    \"\"\"Add or multiply or subtract two numbers x and y\n    >>> candidate(2, 3)\n    5\n    >>> candidate(5, 7)\n    12\n    \"\"\"\n",
                "prompt1c": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    1\n    >>> add(5, 7)\n    2\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(x: int, y: int):\n    \"\"\" two numbers x and y\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(x: int, y: int):\n    \"\"\"Add or multiply or subtract two numbers x and y\n    >>> candidate(2, 3)\n    1\n    >>> candidate(5, 7)\n    2\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
                "test_case": "[{'input': '0, 1', 'output': '1', 'relation': '=='}, {'input': '1, 0', 'output': '1', 'relation': '=='}, {'input': '2, 3', 'output': '5', 'relation': '=='}, {'input': '5, 7', 'output': '12', 'relation': '=='}, {'input': '7, 5', 'output': '12', 'relation': '=='}, {'input': '654, 114', 'output': '768', 'relation': '=='}, {'input': '25, 759', 'output': '784', 'relation': '=='}, {'input': '281, 250', 'output': '531', 'relation': '=='}, {'input': '228, 142', 'output': '370', 'relation': '=='}, {'input': '754, 104', 'output': '858', 'relation': '=='}, {'input': '692, 758', 'output': '1450', 'relation': '=='}, {'input': '913, 558', 'output': '1471', 'relation': '=='}, {'input': '89, 604', 'output': '693', 'relation': '=='}, {'input': '432, 32', 'output': '464', 'relation': '=='}, {'input': '30, 95', 'output': '125', 'relation': '=='}, {'input': '223, 238', 'output': '461', 'relation': '=='}, {'input': '517, 616', 'output': '1133', 'relation': '=='}, {'input': '27, 574', 'output': '601', 'relation': '=='}, {'input': '203, 733', 'output': '936', 'relation': '=='}, {'input': '665, 718', 'output': '1383', 'relation': '=='}, {'input': '558, 429', 'output': '987', 'relation': '=='}, {'input': '225, 459', 'output': '684', 'relation': '=='}, {'input': '603, 284', 'output': '887', 'relation': '=='}, {'input': '828, 890', 'output': '1718', 'relation': '=='}, {'input': '6, 777', 'output': '783', 'relation': '=='}, {'input': '825, 163', 'output': '988', 'relation': '=='}, {'input': '714, 432', 'output': '1146', 'relation': '=='}, {'input': '348, 284', 'output': '632', 'relation': '=='}, {'input': '159, 220', 'output': '379', 'relation': '=='}, {'input': '980, 781', 'output': '1761', 'relation': '=='}, {'input': '344, 104', 'output': '448', 'relation': '=='}, {'input': '94, 389', 'output': '483', 'relation': '=='}, {'input': '99, 367', 'output': '466', 'relation': '=='}, {'input': '867, 352', 'output': '1219', 'relation': '=='}, {'input': '618, 270', 'output': '888', 'relation': '=='}, {'input': '826, 44', 'output': '870', 'relation': '=='}, {'input': '747, 470', 'output': '1217', 'relation': '=='}, {'input': '549, 127', 'output': '676', 'relation': '=='}, {'input': '996, 944', 'output': '1940', 'relation': '=='}, {'input': '387, 80', 'output': '467', 'relation': '=='}, {'input': '565, 300', 'output': '865', 'relation': '=='}, {'input': '849, 643', 'output': '1492', 'relation': '=='}, {'input': '633, 906', 'output': '1539', 'relation': '=='}, {'input': '882, 370', 'output': '1252', 'relation': '=='}, {'input': '591, 196', 'output': '787', 'relation': '=='}, {'input': '721, 71', 'output': '792', 'relation': '=='}, {'input': '46, 677', 'output': '723', 'relation': '=='}, {'input': '233, 791', 'output': '1024', 'relation': '=='}, {'input': '296, 81', 'output': '377', 'relation': '=='}, {'input': '875, 238', 'output': '1113', 'relation': '=='}, {'input': '887, 103', 'output': '990', 'relation': '=='}, {'input': '389, 284', 'output': '673', 'relation': '=='}, {'input': '464, 650', 'output': '1114', 'relation': '=='}, {'input': '854, 373', 'output': '1227', 'relation': '=='}, {'input': '166, 379', 'output': '545', 'relation': '=='}, {'input': '363, 214', 'output': '577', 'relation': '=='}, {'input': '686, 273', 'output': '959', 'relation': '=='}, {'input': '718, 959', 'output': '1677', 'relation': '=='}, {'input': '699, 663', 'output': '1362', 'relation': '=='}, {'input': '73, 623', 'output': '696', 'relation': '=='}, {'input': '650, 175', 'output': '825', 'relation': '=='}, {'input': '546, 746', 'output': '1292', 'relation': '=='}, {'input': '250, 167', 'output': '417', 'relation': '=='}, {'input': '473, 388', 'output': '861', 'relation': '=='}, {'input': '276, 947', 'output': '1223', 'relation': '=='}, {'input': '655, 704', 'output': '1359', 'relation': '=='}, {'input': '570, 224', 'output': '794', 'relation': '=='}, {'input': '701, 332', 'output': '1033', 'relation': '=='}, {'input': '863, 786', 'output': '1649', 'relation': '=='}, {'input': '794, 57', 'output': '851', 'relation': '=='}, {'input': '234, 841', 'output': '1075', 'relation': '=='}, {'input': '32, 824', 'output': '856', 'relation': '=='}, {'input': '323, 410', 'output': '733', 'relation': '=='}, {'input': '274, 67', 'output': '341', 'relation': '=='}, {'input': '216, 935', 'output': '1151', 'relation': '=='}, {'input': '965, 580', 'output': '1545', 'relation': '=='}, {'input': '897, 735', 'output': '1632', 'relation': '=='}, {'input': '322, 217', 'output': '539', 'relation': '=='}, {'input': '671, 511', 'output': '1182', 'relation': '=='}, {'input': '405, 905', 'output': '1310', 'relation': '=='}, {'input': '936, 658', 'output': '1594', 'relation': '=='}, {'input': '469, 146', 'output': '615', 'relation': '=='}, {'input': '271, 142', 'output': '413', 'relation': '=='}, {'input': '252, 762', 'output': '1014', 'relation': '=='}, {'input': '574, 551', 'output': '1125', 'relation': '=='}, {'input': '269, 764', 'output': '1033', 'relation': '=='}, {'input': '598, 438', 'output': '1036', 'relation': '=='}, {'input': '919, 597', 'output': '1516', 'relation': '=='}, {'input': '408, 370', 'output': '778', 'relation': '=='}, {'input': '224, 141', 'output': '365', 'relation': '=='}, {'input': '521, 505', 'output': '1026', 'relation': '=='}, {'input': '93, 773', 'output': '866', 'relation': '=='}, {'input': '48, 881', 'output': '929', 'relation': '=='}, {'input': '112, 156', 'output': '268', 'relation': '=='}, {'input': '642, 163', 'output': '805', 'relation': '=='}, {'input': '811, 696', 'output': '1507', 'relation': '=='}, {'input': '432, 610', 'output': '1042', 'relation': '=='}, {'input': '65, 394', 'output': '459', 'relation': '=='}, {'input': '390, 610', 'output': '1000', 'relation': '=='}, {'input': '479, 541', 'output': '1020', 'relation': '=='}, {'input': '257, 994', 'output': '1251', 'relation': '=='}, {'input': '566, 881', 'output': '1447', 'relation': '=='}, {'input': '965, 11', 'output': '976', 'relation': '=='}, {'input': '696, 738', 'output': '1434', 'relation': '=='}, {'input': '117, 698', 'output': '815', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 54,
            "row": {
                "entry_point": "same_chars",
                "name": "HumanEval/54",
                "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(s0: str, s1: str):\n    \"\"\"\n    Check if two words satisfy a specific condition (such as having the same length, having the same characters, or meeting another specific condition).\n    >>> candidate('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> candidate('abcd', 'dddddddabc')\n    True\n    >>> candidate('dddddddabc', 'abcd')\n    True\n    >>> candidate('eabcd', 'dddddddabc')\n    False\n    >>> candidate('abcd', 'dddddddabce')\n    False\n    >>> candidate('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
                "prompt1c": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabc')\n    False\n    >>> same_chars('dddddddabc', 'abcd')\n    False\n    >>> same_chars('eabcd', 'dddddddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabce')\n    True\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    True\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(s0: str, s1: str):\n    \"\"\"\n    >>> candidate('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> candidate('abcd', 'dddddddabc')\n    True\n    >>> candidate('dddddddabc', 'abcd')\n    True\n    >>> candidate('eabcd', 'dddddddabc')\n    False\n    >>> candidate('abcd', 'dddddddabce')\n    False\n    >>> candidate('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(s0: str, s1: str):\n    \"\"\"\n    Check if two words satisfy a specific condition (such as having the same length, having the same characters, or meeting another specific condition).\n    >>> candidate('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    False\n    >>> candidate('abcd', 'dddddddabc')\n    False\n    >>> candidate('dddddddabc', 'abcd')\n    False\n    >>> candidate('eabcd', 'dddddddabc')\n    True\n    >>> candidate('abcd', 'dddddddabce')\n    True\n    >>> candidate('eabcdzzzz', 'dddzzzzzzzddddabc')\n    True\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\n\ndef candidate(s0: str, s1: str):\n    \"\"\"\n    >>> candidate('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> candidate('abcd', 'dddddddabc')\n    True\n    >>> candidate('dddddddabc', 'abcd')\n    True\n    >>> candidate('eabcd', 'dddddddabc')\n    False\n    >>> candidate('abcd', 'dddddddabce')\n    False\n    >>> candidate('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n",
                "test_case": "[{'input': \"'eabcdzzzz', 'dddzzzzzzzddeddabc'\", 'output': 'True', 'relation': '=='}, {'input': \"'abcd', 'dddddddabc'\", 'output': 'True', 'relation': '=='}, {'input': \"'dddddddabc', 'abcd'\", 'output': 'True', 'relation': '=='}, {'input': \"'eabcd', 'dddddddabc'\", 'output': 'False', 'relation': '=='}, {'input': \"'abcd', 'dddddddabcf'\", 'output': 'False', 'relation': '=='}, {'input': \"'eabcdzzzz', 'dddzzzzzzzddddabc'\", 'output': 'False', 'relation': '=='}, {'input': \"'aabb', 'aaccc'\", 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 55,
            "row": {
                "entry_point": "fib",
                "name": "HumanEval/55",
                "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(n: int):\n    \"\"\"Return a number that satisfies a specific condition (such as being n-th Prime number, being n-th Fibonacci number, or meeting another specific condition).\n    >>> candidate(10)\n    55\n    >>> candidate(1)\n    1\n    >>> candidate(8)\n    21\n    \"\"\"\n",
                "prompt1c": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    550\n    >>> fib(1)\n    10\n    >>> fib(8)\n    210\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(n: int):\n    \"\"\"\n    >>> candidate(10)\n    55\n    >>> candidate(1)\n    1\n    >>> candidate(8)\n    21\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(n: int):\n    \"\"\"Return a number that satisfies a specific condition (such as being n-th Prime number, being n-th Fibonacci number, or meeting another specific condition).\n    >>> candidate(10)\n    550\n    >>> candidate(1)\n    10\n    >>> candidate(8)\n    210\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\n\ndef candidate(n: int):\n    \"\"\"\n    >>> candidate(10)\n    550\n    >>> candidate(1)\n    10\n    >>> candidate(8)\n    210\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
                "test_case": "[{'input': '10', 'output': '55', 'relation': '=='}, {'input': '1', 'output': '1', 'relation': '=='}, {'input': '8', 'output': '21', 'relation': '=='}, {'input': '11', 'output': '89', 'relation': '=='}, {'input': '12', 'output': '144', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 56,
            "row": {
                "entry_point": "correct_bracketing",
                "name": "HumanEval/56",
                "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening brackets have K corresponding closing brackets.\n\n    >>> candidate(\"<\")\n    False\n    >>> candidate(\"<>\")\n    True\n    >>> candidate(\"<<><>>\")\n    True\n    >>> candidate(\"><<>\")\n    False\n    \"\"\"\n",
                "prompt1c": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    True\n    >>> correct_bracketing(\"<>\")\n    False\n    >>> correct_bracketing(\"<<><>>\")\n    False\n    >>> correct_bracketing(\"><<>\")\n    True\n    \"\"\"\n",
                "prompt1p": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n\n    >>> correct_bracketing(\"<\")\n    False\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has K corresponding closing bracket.\n\n    >>> candidate(\"<\")\n    True\n    >>> candidate(\"<>\")\n    False\n    >>> candidate(\"<<><>>\")\n    False\n    >>> candidate(\"><<>\")\n    True\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n\n    >>> candidate(\"<\")\n    False\n    \"\"\"\n",
                "prompt2cp": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n\n    >>> correct_bracketing(\"<\")\n    True\n    \"\"\"\n",
                "prompt3acp": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n\n    >>> candidate(\"<\")\n    True\n    \"\"\"\n",
                "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
                "test_case": "[{'input': \"'<>'\", 'output': 'True', 'relation': '=='}, {'input': \"'<<><>>'\", 'output': 'True', 'relation': '=='}, {'input': \"'<><><<><>><>'\", 'output': 'True', 'relation': '=='}, {'input': \"'<><><<<><><>><>><<><><<>>>'\", 'output': 'True', 'relation': '=='}, {'input': \"'<<<><>>>>'\", 'output': 'False', 'relation': '=='}, {'input': \"'><<>'\", 'output': 'False', 'relation': '=='}, {'input': \"'<'\", 'output': 'False', 'relation': '=='}, {'input': \"'<<<<'\", 'output': 'False', 'relation': '=='}, {'input': \"'>'\", 'output': 'False', 'relation': '=='}, {'input': \"'<<>'\", 'output': 'False', 'relation': '=='}, {'input': \"'<><><<><>><>><<>'\", 'output': 'False', 'relation': '=='}, {'input': \"'<><><<><>><>>><>'\", 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 57,
            "row": {
                "entry_point": "monotonic",
                "name": "HumanEval/57",
                "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l: list):\n    \"\"\"Return True if list elements are increasing or decreasing with a specific condition (such as elements being monotonical, nonmonotonical, or another specific condition).\n    >>> candidate([1, 2, 4, 20])\n    True\n    >>> candidate([1, 20, 4, 10])\n    False\n    >>> candidate([4, 1, 0, -10])\n    True\n    \"\"\"\n",
                "prompt1c": "\n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    False\n    >>> monotonic([1, 20, 4, 10])\n    True\n    >>> monotonic([4, 1, 0, -10])\n    False\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(l: list):\n    \"\"\"\n    >>> candidate([1, 2, 4, 20])\n    True\n    >>> candidate([1, 20, 4, 10])\n    False\n    >>> candidate([4, 1, 0, -10])\n    True\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l: list):\n    \"\"\"Return True if list elements are increasing or decreasing with a specific condition (such as elements being monotonical, nonmonotonical, or another specific condition).\n    >>> candidate([1, 2, 4, 20])\n    False\n    >>> candidate([1, 20, 4, 10])\n    True\n    >>> candidate([4, 1, 0, -10])\n    False\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\n\ndef candidate(l: list):\n    \"\"\"Return True if list elements are monotonic.\n    >>> candidate([1, 2, 4, 20])\n    False\n    >>> candidate([1, 20, 4, 10])\n    True\n    >>> candidate([4, 1, 0, -10])\n    False\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
                "test_case": "[{'input': '[1, 2, 4, 10]', 'output': 'True', 'relation': '=='}, {'input': '[1, 2, 4, 20]', 'output': 'True', 'relation': '=='}, {'input': '[1, 20, 4, 10]', 'output': 'False', 'relation': '=='}, {'input': '[4, 1, 0, -10]', 'output': 'True', 'relation': '=='}, {'input': '[4, 1, 1, 0]', 'output': 'True', 'relation': '=='}, {'input': '[1, 2, 3, 2, 5, 60]', 'output': 'False', 'relation': '=='}, {'input': '[1, 2, 3, 4, 5, 60]', 'output': 'True', 'relation': '=='}, {'input': '[9, 9, 9, 9]', 'output': 'True', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 58,
            "row": {
                "entry_point": "common",
                "name": "HumanEval/58",
                "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(l1: list, l2: list):\n    \"\"\"Return sorted (descendingly or ascendingly) unique common elements for two lists.\n    >>> candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> candidate([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
                "prompt1c": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [653, 5, 1]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [3, 2]\n\n    \"\"\"\n",
                "prompt1p": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return common.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(l1: list, l2: list):\n    \"\"\"Return sorted (descendingly or ascendingly) unique common elements for two lists.\n    >>> candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [653, 5, 1]\n    >>> candidate([5, 3, 2, 8], [3, 2])\n    [3, 2]\n\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(l1: list, l2: list):\n    \"\"\"Return common.\n    >>> candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> candidate([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
                "prompt2cp": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return common.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [653, 5, 1]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [3, 2]\n\n    \"\"\"\n",
                "prompt3acp": "\n\ndef candidate(l1: list, l2: list):\n    \"\"\"Return common.\n    >>> candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [653, 5, 1]\n    >>> candidate([5, 3, 2, 8], [3, 2])\n    [3, 2]\n\n    \"\"\"\n",
                "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
                "test_case": "[{'input': '[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]', 'output': '[1, 5, 653]', 'relation': '=='}, {'input': '[5, 3, 2, 8], [3, 2]', 'output': '[2, 3]', 'relation': '=='}, {'input': '[4, 3, 2, 8], [3, 2, 4]', 'output': '[2, 3, 4]', 'relation': '=='}, {'input': '[4, 3, 2, 8], []', 'output': '[]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 59,
            "row": {
                "entry_point": "largest_prime_factor",
                "name": "HumanEval/59",
                "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(n: int):\n    \"\"\"Return the smallest or largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> candidate(13195)\n    29\n    >>> candidate(2048)\n    2\n    \"\"\"\n",
                "prompt1c": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    5\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(n: int):\n    \"\"\"Return the prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(n: int):\n    \"\"\"Return the smallest or largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> candidate(13195)\n    5\n    >>> candidate(2048)\n    2\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(n: int):\n    \"\"\"Return the smallest or largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
                "test_case": "[{'input': '15', 'output': '5', 'relation': '=='}, {'input': '27', 'output': '3', 'relation': '=='}, {'input': '63', 'output': '7', 'relation': '=='}, {'input': '330', 'output': '11', 'relation': '=='}, {'input': '13195', 'output': '29', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 60,
            "row": {
                "entry_point": "sum_to_n",
                "name": "HumanEval/60",
                "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(n: int):\n    \"\"\"candidate is a function that sums up all numbers.\n    >>> candidate(30)\n    465\n    >>> candidate(100)\n    5050\n    >>> candidate(5)\n    15\n    >>> candidate(10)\n    55\n    >>> candidate(1)\n    1\n    \"\"\"\n",
                "prompt1c": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    930\n    >>> sum_to_n(100)\n    10100\n    >>> sum_to_n(5)\n    30\n    >>> sum_to_n(10)\n    110\n    >>> sum_to_n(1)\n    2\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(n: int):\n    \"\"\"candidate is a function that sums numbers.\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(n: int):\n    \"\"\"candidate is a function that sums up all numbers.\n    >>> candidate(30)\n    465\n    >>> candidate(100)\n    10100\n    >>> candidate(5)\n    30\n    >>> candidate(10)\n    110\n    >>> candidate(1)\n    2\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(n + 1))\n",
                "test_case": "[{'input': '1', 'output': '1', 'relation': '=='}, {'input': '6', 'output': '21', 'relation': '=='}, {'input': '11', 'output': '66', 'relation': '=='}, {'input': '30', 'output': '465', 'relation': '=='}, {'input': '100', 'output': '5050', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 61,
            "row": {
                "entry_point": "correct_bracketing",
                "name": "HumanEval/61",
                "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every closing or opening bracket has a corresponding closing or opening bracket.\n\n    >>> candidate(\"(\")\n    False\n    >>> candidate(\"()\")\n    True\n    >>> candidate(\"(()())\")\n    True\n    >>> candidate(\")(()\")\n    False\n    \"\"\"\n",
                "prompt1c": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    True\n    >>> correct_bracketing(\"()\")\n    False\n    >>> correct_bracketing(\"(()())\")\n    False\n    >>> correct_bracketing(\")(()\")\n    True\n    \"\"\"\n",
                "prompt1p": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n\n    >>> correct_bracketing(\"(\")\n    False\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every closing or opening bracket has a corresponding closing or opening bracket.\n\n    >>> candidate(\"(\")\n    True\n    >>> candidate(\"()\")\n    False\n    >>> candidate(\"(()())\")\n    False\n    >>> candidate(\")(()\")\n    True\n    \"\"\"\n",
                "prompt2ap": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n\n    >>> candidate(\"(\")\n    False\n    \"\"\"\n",
                "prompt2cp": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n\n    >>> correct_bracketing(\"(\")\n    True\n    \"\"\"\n",
                "prompt3acp": "\n\ndef candidate(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n\n    >>> candidate(\"(\")\n    True\n    \"\"\"\n",
                "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
                "test_case": "[{'input': \"'()'\", 'output': 'True', 'relation': '=='}, {'input': \"'(()())'\", 'output': 'True', 'relation': '=='}, {'input': \"'()()(()())()'\", 'output': 'True', 'relation': '=='}, {'input': \"'()()((()()())())(()()(()))'\", 'output': 'True', 'relation': '=='}, {'input': \"'((()())))'\", 'output': 'False', 'relation': '=='}, {'input': \"')(()'\", 'output': 'False', 'relation': '=='}, {'input': \"'('\", 'output': 'False', 'relation': '=='}, {'input': \"'(((('\", 'output': 'False', 'relation': '=='}, {'input': \"')'\", 'output': 'False', 'relation': '=='}, {'input': \"'(()'\", 'output': 'False', 'relation': '=='}, {'input': \"'()()(()())())(()'\", 'output': 'False', 'relation': '=='}, {'input': \"'()()(()())()))()'\", 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 62,
            "row": {
                "entry_point": "derivative",
                "name": "HumanEval/62",
                "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
                "prompt1a": "\n\ndef candidate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return first or second derivative of this polynomial in the same form.\n    >>> candidate([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> candidate([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
                "prompt1c": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [20, 12, 4, 1]\n    >>> derivative([1, 2, 3])\n    [6, 2]\n    \"\"\"\n",
                "prompt1p": "\n\ndef candidate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    \"\"\"\n",
                "prompt2ac": "\n\ndef candidate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return first or second derivative of this polynomial in the same form.\n    >>> candidate([3, 1, 2, 4, 5])\n    [20, 12, 4, 1]\n    >>> candidate([1, 2, 3])\n    [6, 2]\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
                "test_case": "[{'input': '[3, 1, 2, 4, 5]', 'output': '[1, 4, 12, 20]', 'relation': '=='}, {'input': '[1, 2, 3]', 'output': '[2, 6]', 'relation': '=='}, {'input': '[3, 2, 1]', 'output': '[2, 2]', 'relation': '=='}, {'input': '[3, 2, 1, 0, 4]', 'output': '[2, 2, 0, 16]', 'relation': '=='}, {'input': '[1]', 'output': '[]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 63,
            "row": {
                "entry_point": "fibfib",
                "name": "HumanEval/63",
                "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
                "prompt1a": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute an arbitrary element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
                "prompt1c": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    1\n    >>> fibfib(5)\n    5\n    >>> fibfib(8)\n    21\n    \"\"\"\n",
                "prompt1p": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
                "prompt2ac": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute an element of the fibfib number sequence.\n    >>> fibfib(1)\n    1\n    >>> fibfib(5)\n    5\n    >>> fibfib(8)\n    21\n    \"\"\"\n",
                "prompt2ap": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    Please write a function to efficiently compute an element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
                "prompt2cp": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    1\n    >>> fibfib(5)\n    5\n    >>> fibfib(8)\n    21\n    \"\"\"\n",
                "prompt3acp": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    Please write a function to efficiently compute an element of the fibfib number sequence.\n    >>> fibfib(1)\n    1\n    >>> fibfib(5)\n    5\n    >>> fibfib(8)\n    21\n    \"\"\"\n",
                "solution": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
                "test_case": "[{'input': '2', 'output': '1', 'relation': '=='}, {'input': '1', 'output': '0', 'relation': '=='}, {'input': '5', 'output': '4', 'relation': '=='}, {'input': '8', 'output': '24', 'relation': '=='}, {'input': '10', 'output': '81', 'relation': '=='}, {'input': '12', 'output': '274', 'relation': '=='}, {'input': '14', 'output': '927', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 64,
            "row": {
                "entry_point": "vowels_count",
                "name": "HumanEval/64",
                "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
                "prompt1a": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef candidate(s):\n    \"\"\"Write a function candidate which takes a string representing\n    a word as input and returns the number of characters or vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> candidate(\"abcde\")\n    2\n    >>> candidate(\"ACEDY\")\n    3\n    \"\"\"\n",
                "prompt1c": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    5\n    >>> vowels_count(\"ACEDY\")\n    5\n    \"\"\"\n",
                "prompt1p": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef candidate(s):\n    \"\"\"Write a function candidate which takes a string representing\n    a word as input.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    \"\"\"\n",
                "prompt2ac": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef candidate(s):\n    \"\"\"Write a function candidate which takes a string representing\n    a word as input and returns the number of characters or vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> candidate(\"abcde\")\n    5\n    >>> candidate(\"ACEDY\")\n    5\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
                "test_case": "[{'input': '\"abcde\"', 'output': '2', 'relation': '=='}, {'input': '\"Alone\"', 'output': '3', 'relation': '=='}, {'input': '\"key\"', 'output': '2', 'relation': '=='}, {'input': '\"bye\"', 'output': '1', 'relation': '=='}, {'input': '\"keY\"', 'output': '2', 'relation': '=='}, {'input': '\"bYe\"', 'output': '1', 'relation': '=='}, {'input': '\"ACEDY\"', 'output': '3', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 65,
            "row": {
                "entry_point": "circular_shift",
                "name": "HumanEval/65",
                "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
                "prompt1a": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits left or right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
                "prompt1c": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"12\"\n    >>> circular_shift(12, 2)\n    \"21\"\n    \"\"\"\n",
                "prompt1p": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits\n    and return the result as a string.\n    \"\"\"\n",
                "prompt2ac": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits left or right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"12\"\n    >>> circular_shift(12, 2)\n    \"21\"\n    \"\"\"\n",
                "prompt2ap": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits left or right by shift\n    and return the result as a string.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
                "test_case": "[{'input': '100, 2', 'output': '001', 'relation': '=='}, {'input': '12, 2', 'output': '12', 'relation': '=='}, {'input': '97, 8', 'output': '79', 'relation': '=='}, {'input': '12, 1', 'output': '21', 'relation': '=='}, {'input': '11, 101', 'output': '11', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 66,
            "row": {
                "entry_point": "digitSum",
                "name": "HumanEval/66",
                "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
                "prompt1a": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the number of upper characters.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
                "prompt1c": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 2\n        digitSum(\"abcCd\") => 1\n        digitSum(\"helloE\") => 1\n        digitSum(\"woArBld\") => 2\n        digitSum(\"aAaaaXa\") => 2\n    \"\"\"\n",
                "prompt1p": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum'\n    \"\"\"\n",
                "prompt2ac": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the number of upper characters.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 2\n        digitSum(\"abcCd\") => 1\n        digitSum(\"helloE\") => 1\n        digitSum(\"woArBld\") => 2\n        digitSum(\"aAaaaXa\") => 2\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
                "test_case": "[{'input': '\"\"', 'output': '0', 'relation': '=='}, {'input': '\"abAB\"', 'output': '131', 'relation': '=='}, {'input': '\"abcCd\"', 'output': '67', 'relation': '=='}, {'input': '\"helloE\"', 'output': '69', 'relation': '=='}, {'input': '\"woArBld\"', 'output': '131', 'relation': '=='}, {'input': '\"aAaaaXa\"', 'output': '153', 'relation': '=='}, {'input': '\" How are yOu?\"', 'output': '151', 'relation': '=='}, {'input': '\"You arE Very Smart\"', 'output': '327', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 67,
            "row": {
                "entry_point": "fruit_distribution",
                "name": "HumanEval/67",
                "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
                "prompt1a": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of a certain type of fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
                "prompt1c": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 6 = 13\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 = 3\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 = 98\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 = 20\n    \"\"\"\n",
                "prompt1p": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number\n    \"\"\"\n",
                "prompt2ac": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of a certain type of fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 6 = 13\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 = 3\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 = 98\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 = 20\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
                "test_case": "[{'input': '\"5 apples and 6 oranges\",19', 'output': '8', 'relation': '=='}, {'input': '\"5 apples and 6 oranges\",21', 'output': '10', 'relation': '=='}, {'input': '\"0 apples and 1 oranges\",3', 'output': '2', 'relation': '=='}, {'input': '\"1 apples and 0 oranges\",3', 'output': '2', 'relation': '=='}, {'input': '\"2 apples and 3 oranges\",100', 'output': '95', 'relation': '=='}, {'input': '\"2 apples and 3 oranges\",5', 'output': '0', 'relation': '=='}, {'input': '\"1 apples and 100 oranges\",120', 'output': '19', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 68,
            "row": {
                "entry_point": "pluck",
                "name": "HumanEval/68",
                "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
                "prompt1a": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the value.\n    If multiple nodes with the value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ value, its index ],\n    If there are no values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
                "prompt1c": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [4, 0]\n        Explanation\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [3, 2]\n        Explanation\n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [5, 0]\n        Explanation\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
                "prompt1p": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node\n    \"\"\"\n",
                "prompt2ac": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the value.\n    If multiple nodes with the value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ value, its index ],\n    If there are no values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [4, 0]\n        Explanation\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [3, 2]\n        Explanation\n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [5, 0]\n        Explanation\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
                "test_case": "[{'input': '[4,2,3]', 'output': '[2, 1]', 'relation': '=='}, {'input': '[1,2,3]', 'output': '[2, 1]', 'relation': '=='}, {'input': '[]', 'output': '[]', 'relation': '=='}, {'input': '[5, 0, 3, 0, 4, 2]', 'output': '[0, 1]', 'relation': '=='}, {'input': '[1, 2, 3, 0, 5, 3]', 'output': '[0, 3]', 'relation': '=='}, {'input': '[5, 4, 8, 4 ,8]', 'output': '[4, 1]', 'relation': '=='}, {'input': '[7, 6, 7, 1]', 'output': '[6, 1]', 'relation': '=='}, {'input': '[7, 9, 7, 1]', 'output': '[]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 69,
            "row": {
                "entry_point": "search",
                "name": "HumanEval/69",
                "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
                "prompt1a": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the smallest or greatest integer that is greater than \n    zero, and has a frequency similar to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
                "prompt1c": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 4\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 4\n        search([5, 5, 4, 4, 4]) == 5\n    '''\n",
                "prompt1p": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency. \n    '''\n",
                "prompt2ac": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the smallest or greatest integer that is greater than \n    zero, and has a frequency similar to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 4\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 4\n        search([5, 5, 4, 4, 4]) == 5\n    '''\n",
                "prompt2ap": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the smallest or greatest integer that is greater than \n    zero, and has a frequency. \n    '''\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
                "test_case": "[{'input': '[5, 5, 5, 5, 1]', 'output': '1', 'relation': '=='}, {'input': '[4, 1, 4, 1, 4, 4]', 'output': '4', 'relation': '=='}, {'input': '[3, 3]', 'output': '-1', 'relation': '=='}, {'input': '[8, 8, 8, 8, 8, 8, 8, 8]', 'output': '8', 'relation': '=='}, {'input': '[2, 3, 3, 2, 2]', 'output': '2', 'relation': '=='}, {'input': '[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]', 'output': '1', 'relation': '=='}, {'input': '[3, 2, 8, 2]', 'output': '2', 'relation': '=='}, {'input': '[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]', 'output': '1', 'relation': '=='}, {'input': '[8, 8, 3, 6, 5, 6, 4]', 'output': '-1', 'relation': '=='}, {'input': '[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]', 'output': '1', 'relation': '=='}, {'input': '[1, 9, 10, 1, 3]', 'output': '1', 'relation': '=='}, {'input': '[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]', 'output': '5', 'relation': '=='}, {'input': '[1]', 'output': '1', 'relation': '=='}, {'input': '[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]', 'output': '4', 'relation': '=='}, {'input': '[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]', 'output': '2', 'relation': '=='}, {'input': '[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]', 'output': '1', 'relation': '=='}, {'input': '[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]', 'output': '4', 'relation': '=='}, {'input': '[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]', 'output': '4', 'relation': '=='}, {'input': '[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]', 'output': '2', 'relation': '=='}, {'input': '[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]', 'output': '-1', 'relation': '=='}, {'input': '[10]', 'output': '-1', 'relation': '=='}, {'input': '[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]', 'output': '2', 'relation': '=='}, {'input': '[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]', 'output': '1', 'relation': '=='}, {'input': '[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]', 'output': '1', 'relation': '=='}, {'input': '[3, 10, 10, 9, 2]', 'output': '-1', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 70,
            "row": {
                "entry_point": "strange_sort_list",
                "name": "HumanEval/70",
                "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
                "prompt1a": "\ndef candidate(lst):\n    '''\n    Given list of integers, return list in a certain order (ascending, strange or another).\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    candidate([]) == []\n    '''\n",
                "prompt1c": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n    strange_sort_list([5, 5, 5, 5]) == [5]\n    strange_sort_list([]) == []\n    '''\n",
                "prompt1p": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
                "prompt2ac": "\ndef candidate(lst):\n    '''\n    Given list of integers, return list in a certain order (ascending, strange or another).\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    candidate([5, 5, 5, 5]) == [5]\n    candidate([]) == []\n    '''\n",
                "prompt2ap": "\ndef candidate(lst):\n    '''\n    Given list of integers, return list in a certain order (ascending, strange or another).\n\n    Examples:\n    candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    candidate([]) == []\n    '''\n",
                "prompt2cp": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n    strange_sort_list([5, 5, 5, 5]) == [5]\n    strange_sort_list([]) == []\n    '''\n",
                "prompt3acp": "\ndef candidate(lst):\n    '''\n    Given list of integers, return list in a certain order (ascending, strange or another).\n\n    Examples:\n    candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    candidate([5, 5, 5, 5]) == [5]\n    candidate([]) == []\n    '''\n",
                "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
                "test_case": "[{'input': '[1, 2, 3, 4]', 'output': '[1, 4, 2, 3]', 'relation': '=='}, {'input': '[5, 6, 7, 8, 9]', 'output': '[5, 9, 6, 8, 7]', 'relation': '=='}, {'input': '[1, 2, 3, 4, 5]', 'output': '[1, 5, 2, 4, 3]', 'relation': '=='}, {'input': '[5, 6, 7, 8, 9, 1]', 'output': '[1, 9, 5, 8, 6, 7]', 'relation': '=='}, {'input': '[5, 5, 5, 5]', 'output': '[5, 5, 5, 5]', 'relation': '=='}, {'input': '[]', 'output': '[]', 'relation': '=='}, {'input': '[1,2,3,4,5,6,7,8]', 'output': '[1, 8, 2, 7, 3, 6, 4, 5]', 'relation': '=='}, {'input': '[0,2,2,2,5,5,-5,-5]', 'output': '[-5, 5, -5, 5, 0, 2, 2, 2]', 'relation': '=='}, {'input': '[111111]', 'output': '[111111]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 71,
            "row": {
                "entry_point": "triangle_area",
                "name": "HumanEval/71",
                "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
                "prompt1a": "\ndef candidate(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area or perimeter of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    candidate(3, 4, 5) == 6.00\n    candidate(1, 2, 10) == -1\n    '''\n",
                "prompt1c": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 12.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
                "prompt1p": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    '''\n",
                "prompt2ac": "\ndef candidate(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area or perimeter of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    candidate(3, 4, 5) == 12.00\n    candidate(1, 2, 10) == -1\n    '''\n",
                "prompt2ap": "\ndef candidate(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area or perimeter of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    candidate(3, 4, 5) == 6.00\n    '''\n",
                "prompt2cp": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 12.00\n    '''\n",
                "prompt3acp": "\ndef candidate(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area or perimeter of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    candidate(3, 4, 5) == 12.00\n    '''\n",
                "solution": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
                "test_case": "[{'input': '3, 4, 5', 'output': '6.0', 'relation': '=='}, {'input': '1, 2, 10', 'output': '-1', 'relation': '=='}, {'input': '4, 8, 5', 'output': '8.18', 'relation': '=='}, {'input': '2, 2, 2', 'output': '1.73', 'relation': '=='}, {'input': '1, 2, 3', 'output': '-1', 'relation': '=='}, {'input': '10, 5, 7', 'output': '16.25', 'relation': '=='}, {'input': '2, 6, 3', 'output': '-1', 'relation': '=='}, {'input': '1, 1, 1', 'output': '0.43', 'relation': '=='}, {'input': '2, 2, 10', 'output': '-1', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 72,
            "row": {
                "entry_point": "will_it_fly",
                "name": "HumanEval/72",
                "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
                "prompt1a": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is more than or less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
                "prompt1c": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ True \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ True\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ False\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ False\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
                "prompt1p": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n\n    will_it_fly([3], 5) ➞ True\n\n    '''\n",
                "prompt2ac": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is more than or less than or equal the weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ True \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ True\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ False\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ False\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
                "prompt2ap": null,
                "prompt2cp": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ True \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ True\n\n    will_it_fly([3, 2, 3], 9) ➞ False\n\n    will_it_fly([3], 5) ➞ False\n\n   '''\n",
                "prompt3acp": null,
                "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
                "test_case": "[{'input': '[3, 2, 3], 9', 'output': 'True', 'relation': '=='}, {'input': '[1, 2], 5', 'output': 'False', 'relation': '=='}, {'input': '[3], 5', 'output': 'True', 'relation': '=='}, {'input': '[3, 2, 3], 1', 'output': 'False', 'relation': '=='}, {'input': '[1, 2, 3], 6', 'output': 'False', 'relation': '=='}, {'input': '[5], 5', 'output': 'True', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 73,
            "row": {
                "entry_point": "smallest_change",
                "name": "HumanEval/73",
                "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
                "prompt1a": "\ndef candidate(arr):\n    \"\"\"\n    Given an array arr of integers, find the number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    candidate([1,2,3,5,4,7,9,6]) == 4\n    candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    candidate([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
                "prompt1c": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 8\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 7\n    smallest_change([1, 2, 3, 2, 1]) == 5\n    \"\"\"\n",
                "prompt1p": "\ndef candidate(arr):\n    \"\"\"\n    Given an array arr of integers, find the number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n",
                "prompt2ac": "\ndef candidate(arr):\n    \"\"\"\n    Given an array arr of integers, find the maximum or minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    candidate([1,2,3,5,4,7,9,6]) == 8\n    candidate([1, 2, 3, 4, 3, 2, 2]) == 7\n    candidate([1, 2, 3, 2, 1]) == 5\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
                "test_case": "[{'input': '[1,2,3,5,4,7,9,6]', 'output': '4', 'relation': '=='}, {'input': '[1, 2, 3, 4, 3, 2, 2]', 'output': '1', 'relation': '=='}, {'input': '[1, 4, 2]', 'output': '1', 'relation': '=='}, {'input': '[1, 4, 4, 2]', 'output': '1', 'relation': '=='}, {'input': '[1, 2, 3, 2, 1]', 'output': '0', 'relation': '=='}, {'input': '[3, 1, 1, 3]', 'output': '0', 'relation': '=='}, {'input': '[1]', 'output': '0', 'relation': '=='}, {'input': '[0, 1]', 'output': '1', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 74,
            "row": {
                "entry_point": "total_match",
                "name": "HumanEval/74",
                "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
                "prompt1a": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list more than or less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
                "prompt1c": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ ['']\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi', 'admin', 'project']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hi', 'admin']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['1', '2', '3', '4', '5']\n    '''\n",
                "prompt1p": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list.\n\n    '''\n",
                "prompt2ac": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list more than or less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ ['']\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi', 'admin', 'project']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hi', 'admin']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['1', '2', '3', '4', '5']\n    '''\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
                "test_case": "[{'input': '[], []', 'output': '[]', 'relation': '=='}, {'input': \"['hi', 'admin'], ['hi', 'hi']\", 'output': \"['hi', 'hi']\", 'relation': '=='}, {'input': \"['hi', 'admin'], ['hi', 'hi', 'admin', 'project']\", 'output': \"['hi', 'admin']\", 'relation': '=='}, {'input': \"['4'], ['1', '2', '3', '4', '5']\", 'output': \"['4']\", 'relation': '=='}, {'input': \"['hi', 'admin'], ['hI', 'Hi']\", 'output': \"['hI', 'Hi']\", 'relation': '=='}, {'input': \"['hi', 'admin'], ['hI', 'hi', 'hi']\", 'output': \"['hI', 'hi', 'hi']\", 'relation': '=='}, {'input': \"['hi', 'admin'], ['hI', 'hi', 'hii']\", 'output': \"['hi', 'admin']\", 'relation': '=='}, {'input': \"[], ['this']\", 'output': '[]', 'relation': '=='}, {'input': \"['this'], []\", 'output': '[]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 75,
            "row": {
                "entry_point": "is_multiply_prime",
                "name": "HumanEval/75",
                "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
                "prompt1a": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of K prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
                "prompt1c": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == False\n    \"\"\"\n",
                "prompt1p": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    \"\"\"\n",
                "prompt2ac": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of K prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == False\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == False\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
                "test_case": "[{'input': '5', 'output': 'False', 'relation': '=='}, {'input': '30', 'output': 'True', 'relation': '=='}, {'input': '8', 'output': 'True', 'relation': '=='}, {'input': '10', 'output': 'False', 'relation': '=='}, {'input': '125', 'output': 'True', 'relation': '=='}, {'input': '3 * 5 * 7', 'output': 'True', 'relation': '=='}, {'input': '3 * 6 * 7', 'output': 'False', 'relation': '=='}, {'input': '9 * 9 * 9', 'output': 'False', 'relation': '=='}, {'input': '11 * 9 * 9', 'output': 'False', 'relation': '=='}, {'input': '11 * 13 * 7', 'output': 'True', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 76,
            "row": {
                "entry_point": "is_simple_power",
                "name": "HumanEval/76",
                "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
                "prompt1a": "\ndef candidate(a, b):\n    \"\"\"Your task is to write a function that returns true if a number x is a \n    power of n and false in other cases.\n    x is a simple power of n if n**k=x\n    For example:\n    candidate(1, 4) => true\n    candidate(2, 2) => true\n    candidate(8, 2) => true\n    candidate(3, 2) => false\n    candidate(3, 1) => false\n    candidate(5, 3) => false\n    \"\"\"\n",
                "prompt1c": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => false\n    is_simple_power(2, 2) => false\n    is_simple_power(8, 2) => false\n    is_simple_power(3, 2) => true\n    is_simple_power(3, 1) => true\n    is_simple_power(5, 3) => true\n    \"\"\"\n",
                "prompt1p": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if \n    \"\"\"\n",
                "prompt2ac": "\ndef candidate(a, b):\n    \"\"\"Your task is to write a function that returns true if a number x is a \n    power of n and false in other cases.\n    x is a simple power of n if n**k=x\n    For example:\n    candidate(1, 4) => false\n    candidate(2, 2) => false\n    candidate(8, 2) => false\n    candidate(3, 2) => true\n    candidate(3, 1) => true\n    candidate(5, 3) => true\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
                "test_case": "[{'input': '16, 2', 'output': 'True', 'relation': '=='}, {'input': '143214, 16', 'output': 'False', 'relation': '=='}, {'input': '4, 2', 'output': 'True', 'relation': '=='}, {'input': '9, 3', 'output': 'True', 'relation': '=='}, {'input': '16, 4', 'output': 'True', 'relation': '=='}, {'input': '24, 2', 'output': 'False', 'relation': '=='}, {'input': '128, 4', 'output': 'False', 'relation': '=='}, {'input': '12, 6', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 77,
            "row": {
                "entry_point": "iscube",
                "name": "HumanEval/77",
                "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
                "prompt1a": "\ndef candidate(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube or a similar exponents of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    candidate(1) ==> True\n    candidate(2) ==> False\n    candidate(-1) ==> True\n    candidate(64) ==> True\n    candidate(0) ==> True\n    candidate(180) ==> False\n    '''\n",
                "prompt1c": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> False\n    iscube(2) ==> True\n    iscube(-1) ==> False\n    iscube(64) ==> False\n    iscube(0) ==> False\n    iscube(180) ==> True\n    '''\n",
                "prompt1p": "\ndef candidate(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is.\n    Note: you may assume the input is always valid.\n    Examples:\n    candidate(1) ==> True\n    candidate(2) ==> False\n    candidate(-1) ==> True\n    candidate(64) ==> True\n    candidate(0) ==> True\n    candidate(180) ==> False\n    '''\n",
                "prompt2ac": "\ndef candidate(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube or a similar exponents of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    candidate(1) ==> False\n    candidate(2) ==> True\n    candidate(-1) ==> False\n    candidate(64) ==> False\n    candidate(0) ==> False\n    candidate(180) ==> True\n    '''\n",
                "prompt2ap": null,
                "prompt2cp": "\ndef candidate(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is.\n    Note: you may assume the input is always valid.\n    Examples:\n    candidate(1) ==> False\n    candidate(2) ==> True\n    candidate(-1) ==> False\n    candidate(64) ==> False\n    candidate(0) ==> False\n    candidate(180) ==> True\n    '''\n",
                "prompt3acp": null,
                "solution": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
                "test_case": "[{'input': '1', 'output': 'True', 'relation': '=='}, {'input': '2', 'output': 'False', 'relation': '=='}, {'input': '-1', 'output': 'True', 'relation': '=='}, {'input': '64', 'output': 'True', 'relation': '=='}, {'input': '180', 'output': 'False', 'relation': '=='}, {'input': '1000', 'output': 'True', 'relation': '=='}, {'input': '0', 'output': 'True', 'relation': '=='}, {'input': '1729', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 78,
            "row": {
                "entry_point": "hex_key",
                "name": "HumanEval/78",
                "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
                "prompt1a": "\ndef candidate(num):\n    \"\"\"You have been tasked to write a function that receives \n    an octal or hexadecimal (or another base) number as a string and counts the number of octal or hexadecimal (or another base) \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13), or digits from other base units.\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
                "prompt1c": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 0.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 2.\n    For num = \"123456789ABCDEF0\" the output should be 4.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
                "prompt1p": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
                "prompt2ac": "\ndef candidate(num):\n    \"\"\"You have been tasked to write a function that receives \n    an octal or hexadecimal (or another base) number as a string and counts the number of octal or hexadecimal (or another base) \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13), or digits from other base units.\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 0.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 2.\n    For num = \"123456789ABCDEF0\" the output should be 4.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
                "prompt2ap": "\ndef candidate(num):\n    \"\"\"You have been tasked to write a function that receives \n    an octal or hexadecimal (or another base) number as a string\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
                "prompt2cp": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string\n    Examples:\n    For num = \"AB\" the output should be 0.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 2.\n    For num = \"123456789ABCDEF0\" the output should be 4.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
                "prompt3acp": "\ndef candidate(num):\n    \"\"\"You have been tasked to write a function that receives \n    an octal or hexadecimal (or another base) number as a string\n    Examples:\n    For num = \"AB\" the output should be 0.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 2.\n    For num = \"123456789ABCDEF0\" the output should be 4.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
                "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
                "test_case": "[{'input': '\"AB\"', 'output': '1', 'relation': '=='}, {'input': '\"1077E\"', 'output': '2', 'relation': '=='}, {'input': '\"ABED1A33\"', 'output': '4', 'relation': '=='}, {'input': '\"2020\"', 'output': '2', 'relation': '=='}, {'input': '\"123456789ABCDEF0\"', 'output': '6', 'relation': '=='}, {'input': '\"112233445566778899AABBCCDDEEFF00\"', 'output': '12', 'relation': '=='}, {'input': '[]', 'output': '0', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 79,
            "row": {
                "entry_point": "decimal_to_binary",
                "name": "HumanEval/79",
                "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
                "prompt1a": "\ndef candidate(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1' or '2'.\n\n    There will be an extra couple of characters 'db' at different positions (start, or middle, or end) of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    candidate(15)   # returns \"db1111db\"\n    candidate(32)   # returns \"db100000db\"\n    \"\"\"\n",
                "prompt1c": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db15db\"\n    decimal_to_binary(32)   # returns \"db32db\"\n    \"\"\"\n",
                "prompt1p": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at.\n    \"\"\"\n",
                "prompt2ac": "\ndef candidate(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1' or '2'.\n\n    There will be an extra couple of characters 'db' at different positions (start, or middle, or end) of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    candidate(15)   # returns \"db15db\"\n    candidate(32)   # returns \"db32db\"\n    \"\"\"\n",
                "prompt2ap": "\ndef candidate(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1' or '2'.\n\n    There will be an extra couple of characters 'db' at.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    return \"db\" + bin(decimal)[2:] + \"db\"\n",
                "test_case": "[{'input': '0', 'output': 'db0db', 'relation': '=='}, {'input': '32', 'output': 'db100000db', 'relation': '=='}, {'input': '103', 'output': 'db1100111db', 'relation': '=='}, {'input': '15', 'output': 'db1111db', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 80,
            "row": {
                "entry_point": "is_happy",
                "name": "HumanEval/80",
                "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
                "prompt1a": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and roughly substrings of letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
                "prompt1c": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => True\n    is_happy(aa) => True\n    is_happy(abcd) => False\n    is_happy(aabb) => True\n    is_happy(adb) => False\n    is_happy(xyy) => True\n    \"\"\"\n",
                "prompt1p": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
                "prompt2ac": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and roughly substrings of letters are distinct\n    For example:\n    is_happy(a) => True\n    is_happy(aa) => True\n    is_happy(abcd) => False\n    is_happy(aabb) => True\n    is_happy(adb) => False\n    is_happy(xyy) => True\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    For example:\n    is_happy(a) => True\n    is_happy(aa) => True\n    is_happy(abcd) => False\n    is_happy(aabb) => True\n    is_happy(adb) => False\n    is_happy(xyy) => True\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
                "test_case": "[{'input': '\"a\"', 'output': 'False ', 'relation': '=='}, {'input': '\"aa\"', 'output': 'False ', 'relation': '=='}, {'input': '\"abcd\"', 'output': 'True ', 'relation': '=='}, {'input': '\"aabb\"', 'output': 'False ', 'relation': '=='}, {'input': '\"adb\"', 'output': 'True ', 'relation': '=='}, {'input': '\"xyy\"', 'output': 'False ', 'relation': '=='}, {'input': '\"iopaxpoi\"', 'output': 'True ', 'relation': '=='}, {'input': '\"iopaxioi\"', 'output': 'False ', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 81,
            "row": {
                "entry_point": "numerical_letter_grade",
                "name": "HumanEval/81",
                "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
                "prompt1a": "\ndef candidate(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of percentage or letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    candidate([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
                "prompt1c": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'C', 'A']\n    \"\"\"\n",
                "prompt1p": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n    \"\"\"\n",
                "prompt2ac": "\ndef candidate(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of percentage or letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    candidate([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'C', 'A']\n    \"\"\"\n",
                "prompt2ap": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of percentage or letter grades using the following table:\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
                "test_case": "[{'input': '[4.0, 3, 1.7, 2, 3.5]', 'output': \"['A+', 'B', 'C-', 'C', 'A-']\", 'relation': '=='}, {'input': '[1.2]', 'output': \"['D+']\", 'relation': '=='}, {'input': '[0.5]', 'output': \"['D-']\", 'relation': '=='}, {'input': '[0.0]', 'output': \"['E']\", 'relation': '=='}, {'input': '[1, 0.3, 1.5, 2.8, 3.3]', 'output': \"['D', 'D-', 'C-', 'B', 'B+']\", 'relation': '=='}, {'input': '[0, 0.7]', 'output': \"['E', 'D-']\", 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 82,
            "row": {
                "entry_point": "prime_length",
                "name": "HumanEval/82",
                "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
                "prompt1a": "\ndef candidate(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length meets a certain condition (e.g. is an even or prime number or another type) or False otherwise\n    Examples\n    candidate('Hello') == True\n    candidate('abcdcba') == True\n    candidate('kittens') == True\n    candidate('orange') == False\n    \"\"\"\n",
                "prompt1c": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == False\n    prime_length('abcdcba') == False\n    prime_length('kittens') == False\n    prime_length('orange') == True\n    \"\"\"\n",
                "prompt1p": "\ndef candidate(string):\n    \"\"\"\n    Examples\n    candidate('Hello') == True\n    candidate('abcdcba') == True\n    candidate('kittens') == True\n    candidate('orange') == False\n    \"\"\"\n",
                "prompt2ac": "\ndef candidate(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length meets a certain condition (e.g. is an even or prime number or another type) or False otherwise\n    Examples\n    candidate('Hello') == False\n    candidate('abcdcba') == False\n    candidate('kittens') == False\n    candidate('orange') == True\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\ndef candidate(string):\n    \"\"\"\n    Examples\n    candidate('Hello') == False\n    candidate('abcdcba') == False\n    candidate('kittens') == False\n    candidate('orange') == True\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
                "test_case": "[{'input': \"'Hello'\", 'output': 'True', 'relation': '=='}, {'input': \"'abcdcba'\", 'output': 'True', 'relation': '=='}, {'input': \"'kittens'\", 'output': 'True', 'relation': '=='}, {'input': \"'orange'\", 'output': 'False', 'relation': '=='}, {'input': \"'wow'\", 'output': 'True', 'relation': '=='}, {'input': \"'world'\", 'output': 'True', 'relation': '=='}, {'input': \"'MadaM'\", 'output': 'True', 'relation': '=='}, {'input': \"'Wow'\", 'output': 'True', 'relation': '=='}, {'input': \"''\", 'output': 'False', 'relation': '=='}, {'input': \"'HI'\", 'output': 'True', 'relation': '=='}, {'input': \"'go'\", 'output': 'True', 'relation': '=='}, {'input': \"'gogo'\", 'output': 'False', 'relation': '=='}, {'input': \"'aaaaaaaaaaaaaaa'\", 'output': 'False', 'relation': '=='}, {'input': \"'Madam'\", 'output': 'True', 'relation': '=='}, {'input': \"'M'\", 'output': 'False', 'relation': '=='}, {'input': \"'0'\", 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 83,
            "row": {
                "entry_point": "starts_one_ends",
                "name": "HumanEval/83",
                "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
                "prompt1a": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of \n    integers that start or end with 1.\n    \"\"\"\n",
                "prompt1c": null,
                "prompt1p": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    \"\"\"\n",
                "prompt2ac": null,
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
                "test_case": "[{'input': '1', 'output': '1', 'relation': '=='}, {'input': '2', 'output': '18', 'relation': '=='}, {'input': '3', 'output': '180', 'relation': '=='}, {'input': '4', 'output': '1800', 'relation': '=='}, {'input': '5', 'output': '18000', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 84,
            "row": {
                "entry_point": "solve",
                "name": "HumanEval/84",
                "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
                "prompt1a": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in a specific base (hexadecimal or binary or another base).\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of hexadecimal or binary number\n    \"\"\"\n",
                "prompt1c": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 0 the output should be \"0\".\n        For N = 150, the sum of digits will be 0 the output should be \"0\".\n        For N = 147, the sum of digits will be 0 the output should be \"0\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
                "prompt1p": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n    \"\"\"\n",
                "prompt2ac": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in a specific base (hexadecimal or binary or another base).\n    \n    Example\n        For N = 1000, the sum of digits will be 0 the output should be \"0\".\n        For N = 150, the sum of digits will be 0 the output should be \"0\".\n        For N = 147, the sum of digits will be 0 the output should be \"0\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of hexadecimal or binary number\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits.\n    \n    Example\n        For N = 1000, the sum of digits will be 0 the output should be \"0\".\n        For N = 150, the sum of digits will be 0 the output should be \"0\".\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(sum(int(i) for i in str(N)))[2:]\n",
                "test_case": "[{'input': '1000', 'output': '1', 'relation': '=='}, {'input': '150', 'output': '110', 'relation': '=='}, {'input': '147', 'output': '1100', 'relation': '=='}, {'input': '333', 'output': '1001', 'relation': '=='}, {'input': '963', 'output': '10010', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 85,
            "row": {
                "entry_point": "add",
                "name": "HumanEval/85",
                "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
                "prompt1a": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at certain indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
                "prompt1c": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 6 \n    \"\"\"\n",
                "prompt1p": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
                "prompt2ac": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at certain indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 6 \n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 6 \n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
                "test_case": "[{'input': '[4, 88]', 'output': '88', 'relation': '=='}, {'input': '[4, 5, 6, 7, 2, 122]', 'output': '122', 'relation': '=='}, {'input': '[4, 0, 6, 7]', 'output': '0', 'relation': '=='}, {'input': '[4, 4, 6, 8]', 'output': '12', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 86,
            "row": {
                "entry_point": "anti_shuffle",
                "name": "HumanEval/86",
                "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
                "prompt1a": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    descending or ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
                "prompt1c": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'iH'\n    anti_shuffle('hello') returns 'ollhe'\n    anti_shuffle('Hello World!!!') returns 'roldW!!! olleH'\n    \"\"\"\n",
                "prompt1p": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    \"\"\"\n",
                "prompt2ac": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    descending or ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'iH'\n    anti_shuffle('hello') returns 'ollhe'\n    anti_shuffle('Hello World!!!') returns 'roldW!!! olleH'\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
                "test_case": "[{'input': \"'Hi'\", 'output': 'Hi', 'relation': '=='}, {'input': \"'hello'\", 'output': 'ehllo', 'relation': '=='}, {'input': \"'number'\", 'output': 'bemnru', 'relation': '=='}, {'input': \"'abcd'\", 'output': 'abcd', 'relation': '=='}, {'input': \"'Hello World!!!'\", 'output': 'Hello !!!Wdlor', 'relation': '=='}, {'input': \"''\", 'output': '', 'relation': '=='}, {'input': \"'Hi. My name is Mister Robot. How are you?'\", 'output': '.Hi My aemn is Meirst .Rboot How aer ?ouy', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 87,
            "row": {
                "entry_point": "get_row",
                "name": "HumanEval/87",
                "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
                "prompt1a": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 1 or 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows.\n    Also, sort coordinates of the row by columns.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
                "prompt1c": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(2, 2)]\n    get_row([], 1) == [(2, 2)]\n    get_row([[], [1], [1, 2, 3]], 3) == []\n    \"\"\"\n",
                "prompt1p": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list.\n    \"\"\"\n",
                "prompt2ac": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 1 or 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows.\n    Also, sort coordinates of the row by columns.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(2, 2)]\n    get_row([], 1) == [(2, 2)]\n    get_row([[], [1], [1, 2, 3]], 3) == []\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
                "test_case": "[{'input': '[], 1', 'output': '[]', 'relation': '=='}, {'input': '[[1]], 2', 'output': '[]', 'relation': '=='}, {'input': '[[], [1], [1, 2, 3]], 3', 'output': '[(2, 2)]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 88,
            "row": {
                "entry_point": "sort_array",
                "name": "HumanEval/88",
                "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
                "prompt1a": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd or even,\n    or sort it in descending order if the sum( first index value, last index value) is even or odd.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
                "prompt1c": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n    \"\"\"\n",
                "prompt1p": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it\n    \"\"\"\n",
                "prompt2ac": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd or even,\n    or sort it in descending order if the sum( first index value, last index value) is even or odd.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [5, 4, 3, 2, 1, 0]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n    \"\"\"\n",
                "prompt2ap": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd or even,\n    or sort it\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
                "test_case": "[{'input': '[]', 'output': '[]', 'relation': '=='}, {'input': '[5]', 'output': '[5]', 'relation': '=='}, {'input': '[2, 4, 3, 0, 1, 5]', 'output': '[0, 1, 2, 3, 4, 5]', 'relation': '=='}, {'input': '[2, 4, 3, 0, 1, 5, 6]', 'output': '[6, 5, 4, 3, 2, 1, 0]', 'relation': '=='}, {'input': '[2, 1]', 'output': '[1, 2]', 'relation': '=='}, {'input': '[15, 42, 87, 32 ,11, 0]', 'output': '[0, 11, 15, 32, 42, 87]', 'relation': '=='}, {'input': '[21, 14, 23, 11]', 'output': '[23, 21, 14, 11]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 89,
            "row": {
                "entry_point": "encrypt",
                "name": "HumanEval/89",
                "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
                "prompt1a": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by three or two multiplied to three or two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
                "prompt1c": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'kl'\n    encrypt('asdfghjkl') returns 'cvfiknqrs'\n    encrypt('gf') returns 'ji'\n    encrypt('et') returns 'gv'\n    \"\"\"\n",
                "prompt1p": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted. \n    \"\"\"\n",
                "prompt2ac": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by three or two multiplied to three or two places.\n    For example:\n    encrypt('hi') returns 'kl'\n    encrypt('asdfghjkl') returns 'cvfiknqrs'\n    encrypt('gf') returns 'ji'\n    encrypt('et') returns 'gv'\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
                "test_case": "[{'input': \"'hi'\", 'output': 'lm', 'relation': '=='}, {'input': \"'asdfghjkl'\", 'output': 'ewhjklnop', 'relation': '=='}, {'input': \"'gf'\", 'output': 'kj', 'relation': '=='}, {'input': \"'et'\", 'output': 'ix', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 90,
            "row": {
                "entry_point": "next_smallest",
                "name": "HumanEval/90",
                "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
                "prompt1a": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 1st, or 2nd, or 3rd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
                "prompt1c": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 1\n    next_smallest([5, 1, 4, 3, 2]) == 1\n    next_smallest([]) == None\n    next_smallest([1, 1]) == 1\n    \"\"\"\n",
                "prompt1p": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\n    \"\"\"\n",
                "prompt2ac": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 1st, or 2nd, or 3rd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 1\n    next_smallest([5, 1, 4, 3, 2]) == 1\n    next_smallest([]) == None\n    next_smallest([1, 1]) == 1\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
                "test_case": "[{'input': '[1, 2, 3, 4, 5]', 'output': '2', 'relation': '=='}, {'input': '[5, 1, 4, 3, 2]', 'output': '2', 'relation': '=='}, {'input': '[]', 'output': 'None', 'relation': '=='}, {'input': '[1, 1]', 'output': 'None', 'relation': '=='}, {'input': '[1,1,1,1,0]', 'output': '1', 'relation': '=='}, {'input': '[1, 0**0]', 'output': 'None', 'relation': '=='}, {'input': '[-35, 34, 12, -45]', 'output': '-35', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 91,
            "row": {
                "entry_point": "is_bored",
                "name": "HumanEval/91",
                "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
                "prompt1a": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with a given word (such as \"W\", \"I\").\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
                "prompt1c": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    1\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    3\n    \"\"\"\n",
                "prompt1p": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms.\n    \"\"\"\n",
                "prompt2ac": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with a given word (such as \"W\", \"I\").\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    1\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    3\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
                "test_case": "[{'input': '\"Hello world\"', 'output': '0', 'relation': '=='}, {'input': '\"Is the sky blue?\"', 'output': '0', 'relation': '=='}, {'input': '\"I love It !\"', 'output': '1', 'relation': '=='}, {'input': '\"bIt\"', 'output': '0', 'relation': '=='}, {'input': '\"I feel good today. I will be productive. will kill It\"', 'output': '2', 'relation': '=='}, {'input': '\"You and I are going for a walk\"', 'output': '0', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 92,
            "row": {
                "entry_point": "any_int",
                "name": "HumanEval/92",
                "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
                "prompt1a": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers meets certain condition (such as larger than, or equal to the sum of the other two), and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
                "prompt1c": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ False\n    \n    any_int(3, 2, 2) ➞ True\n\n    any_int(3, -2, 1) ➞ False\n    \n    any_int(3.6, -2.2, 2) ➞ True\n  \n\n    \n    '''\n",
                "prompt1p": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to\n\n    '''\n",
                "prompt2ac": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers meets certain condition (such as larger than, or equal to the sum of the other two), and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ False\n    \n    any_int(3, 2, 2) ➞ True\n\n    any_int(3, -2, 1) ➞ False\n    \n    any_int(3.6, -2.2, 2) ➞ True\n  \n\n    \n    '''\n",
                "prompt2ap": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers meets certain condition (such as larger than, or equal to \n\n    '''\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
                "test_case": "[{'input': '2, 3, 1', 'output': 'True', 'relation': '=='}, {'input': '2.5, 2, 3', 'output': 'False', 'relation': '=='}, {'input': '1.5, 5, 3.5', 'output': 'False', 'relation': '=='}, {'input': '2, 6, 2', 'output': 'False', 'relation': '=='}, {'input': '4, 2, 2', 'output': 'True', 'relation': '=='}, {'input': '2.2, 2.2, 2.2', 'output': 'False', 'relation': '=='}, {'input': '-4, 6, 2', 'output': 'True', 'relation': '=='}, {'input': '2, 1, 1', 'output': 'True', 'relation': '=='}, {'input': '3, 4, 7', 'output': 'True', 'relation': '=='}, {'input': '3.0, 4, 7', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 93,
            "row": {
                "entry_point": "encode",
                "name": "HumanEval/93",
                "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
                "prompt1a": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears several places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
                "prompt1c": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TEST'\n    >>> encode('This is a message')\n    'tHIS IS A MESSAGE'\n    \"\"\"\n",
                "prompt1p": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears \n    \"\"\"\n",
                "prompt2ac": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears several places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TEST'\n    >>> encode('This is a message')\n    'tHIS IS A MESSAGE'\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
                "test_case": "[{'input': \"'TEST'\", 'output': 'tgst', 'relation': '=='}, {'input': \"'Mudasir'\", 'output': 'mWDCSKR', 'relation': '=='}, {'input': \"'YES'\", 'output': 'ygs', 'relation': '=='}, {'input': \"'This is a message'\", 'output': 'tHKS KS C MGSSCGG', 'relation': '=='}, {'input': '\"I DoNt KnOw WhAt tO WrItE\"', 'output': 'k dQnT kNqW wHcT Tq wRkTg', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 94,
            "row": {
                "entry_point": "skjkasdkd",
                "name": "HumanEval/94",
                "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
                "prompt1a": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the smallest or largest prime value and return.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
                "prompt1c": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 2\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 2\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 3\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 5\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 2\n    \"\"\"\n",
                "prompt1p": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
                "prompt2ac": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the smallest or largest prime value and return.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 2\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 2\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 3\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 5\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 2\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 2\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 2\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 3\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 5\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 2\n    \"\"\"\n",
                "prompt3acp": null,
                "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
                "test_case": "[{'input': '[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]', 'output': '10', 'relation': '=='}, {'input': '[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]', 'output': '25', 'relation': '=='}, {'input': '[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]', 'output': '13', 'relation': '=='}, {'input': '[0,724,32,71,99,32,6,0,5,91,83,0,5,6]', 'output': '11', 'relation': '=='}, {'input': '[0,81,12,3,1,21]', 'output': '3', 'relation': '=='}, {'input': '[0,8,1,2,1,7]', 'output': '7', 'relation': '=='}, {'input': '[8191]', 'output': '19', 'relation': '=='}, {'input': '[8191, 123456, 127, 7]', 'output': '19', 'relation': '=='}, {'input': '[127, 97, 8192]', 'output': '10', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 95,
            "row": {
                "entry_point": "check_dict_case",
                "name": "HumanEval/95",
                "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
                "prompt1a": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if some or all keys are strings in lower \n    case or some or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
                "prompt1c": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return True.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.\n    \"\"\"\n",
                "prompt1p": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in.\n    \"\"\"\n",
                "prompt2ac": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if some or all keys are strings in lower \n    case or some or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return True.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return True.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.\n    \"\"\"\n",
                "prompt2ap": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if some or all keys are strings in lower \n    case or some or all keys are strings in.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
                "test_case": "[{'input': '{\"p\":\"pineapple\", \"b\":\"banana\"}', 'output': 'True', 'relation': '=='}, {'input': '{\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}', 'output': 'False', 'relation': '=='}, {'input': '{\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}', 'output': 'False', 'relation': '=='}, {'input': '{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}', 'output': 'False', 'relation': '=='}, {'input': '{\"STATE\":\"NC\", \"ZIP\":\"12345\" }', 'output': 'True', 'relation': '=='}, {'input': '{\"fruit\":\"Orange\", \"taste\":\"Sweet\" }', 'output': 'True', 'relation': '=='}, {'input': '{}', 'output': 'False', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 96,
            "row": {
                "entry_point": "count_up_to",
                "name": "HumanEval/96",
                "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
                "prompt1a": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the last or first n\n    integers that are prime numbers and more or less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
                "prompt1c": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [1,2,3]\n    count_up_to(11) => [1,2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [1,2,3,5,7,11,13,17,19]\n    count_up_to(1) => [1]\n    count_up_to(18) => [1,2,3,5,7,11,13,17]\n    \"\"\"\n",
                "prompt1p": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and\n    \"\"\"\n",
                "prompt2ac": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the last or first n\n    integers that are prime numbers and more or less than n.\n    for example:\n    count_up_to(5) => [1,2,3]\n    count_up_to(11) => [1,2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [1,2,3,5,7,11,13,17,19]\n    count_up_to(1) => [1]\n    count_up_to(18) => [1,2,3,5,7,11,13,17]\n    \"\"\"\n",
                "prompt2ap": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the last or first n\n    integers that are prime numbers and\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
                "test_case": "[{'input': '5', 'output': '[2, 3]', 'relation': '=='}, {'input': '6', 'output': '[2, 3, 5]', 'relation': '=='}, {'input': '7', 'output': '[2, 3, 5]', 'relation': '=='}, {'input': '10', 'output': '[2, 3, 5, 7]', 'relation': '=='}, {'input': '0', 'output': '[]', 'relation': '=='}, {'input': '22', 'output': '[2, 3, 5, 7, 11, 13, 17, 19]', 'relation': '=='}, {'input': '1', 'output': '[]', 'relation': '=='}, {'input': '18', 'output': '[2, 3, 5, 7, 11, 13, 17]', 'relation': '=='}, {'input': '47', 'output': '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]', 'relation': '=='}, {'input': '101', 'output': '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 97,
            "row": {
                "entry_point": "multiply",
                "name": "HumanEval/97",
                "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
                "prompt1a": "\ndef candidate(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the sum or product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    candidate(148, 412) should return 16.\n    candidate(19, 28) should return 72.\n    candidate(2020, 1851) should return 0.\n    candidate(14,-15) should return 20.\n    \"\"\"\n",
                "prompt1c": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 4.\n    multiply(19, 28) should return 2.\n    multiply(2020, 1851) should return 10.\n    multiply(14,-15) should return 1.\n    \"\"\"\n",
                "prompt1p": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their.\n    \"\"\"\n",
                "prompt2ac": "\ndef candidate(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the sum or product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    candidate(148, 412) should return 4.\n    candidate(19, 28) should return 2.\n    candidate(2020, 1851) should return 10.\n    candidate(14,-15) should return 1.\n    \"\"\"\n",
                "prompt2ap": "\ndef candidate(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the sum or product of their.\n    \"\"\"\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return abs(a % 10) * abs(b % 10)\n",
                "test_case": "[{'input': '148, 412', 'output': '16', 'relation': '=='}, {'input': '19, 28', 'output': '72', 'relation': '=='}, {'input': '2020, 1851', 'output': '0', 'relation': '=='}, {'input': '14,-15', 'output': '20', 'relation': '=='}, {'input': '76, 67', 'output': '42', 'relation': '=='}, {'input': '17, 27', 'output': '49', 'relation': '=='}, {'input': '0, 1', 'output': '0', 'relation': '=='}, {'input': '0, 0', 'output': '0', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 98,
            "row": {
                "entry_point": "count_upper",
                "name": "HumanEval/98",
                "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
                "prompt1a": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd or even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
                "prompt1c": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 2\n    count_upper('abcdefg') returns 1\n    count_upper('dBBE') returns 1\n    \"\"\"\n",
                "prompt1p": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in \n    \"\"\"\n",
                "prompt2ac": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd or even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 2\n    count_upper('abcdefg') returns 1\n    count_upper('dBBE') returns 1\n    \"\"\"\n",
                "prompt2ap": null,
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
                "test_case": "[{'input': \"'abcdefg'\", 'output': '0', 'relation': '=='}, {'input': \"'dBBE'\", 'output': '0', 'relation': '=='}, {'input': \"''\", 'output': '0', 'relation': '=='}, {'input': \"'EEEE'\", 'output': '2', 'relation': '=='}]"
            },
            "truncated_cells": []
        },
        {
            "row_idx": 99,
            "row": {
                "entry_point": "closest_integer",
                "name": "HumanEval/99",
                "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
                "prompt1a": "\ndef candidate(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the farthest or closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> candidate(\"10\")\n    10\n    >>> candidate(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example candidate(\"14.5\") should\n    return 15 and candidate(\"-14.5\") should return -15.\n    '''\n",
                "prompt1c": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    20\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 10 and closest_integer(\"-14.5\") should return -10.\n    '''\n",
                "prompt1p": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest\n    '''\n",
                "prompt2ac": "\ndef candidate(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the farthest or closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> candidate(\"10\")\n    10\n    >>> candidate(\"15.3\")\n    20\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 10 and closest_integer(\"-14.5\") should return -10.\n    '''\n",
                "prompt2ap": "\ndef candidate(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the farthest or closest\n    '''\n",
                "prompt2cp": null,
                "prompt3acp": null,
                "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
                "test_case": "[{'input': '\"10\"', 'output': '10', 'relation': '=='}, {'input': '\"14.5\"', 'output': '15', 'relation': '=='}, {'input': '\"-15.5\"', 'output': '-16', 'relation': '=='}, {'input': '\"15.3\"', 'output': '15', 'relation': '=='}, {'input': '\"0\"', 'output': '0', 'relation': '=='}]"
            },
            "truncated_cells": []
        }
    ]
}